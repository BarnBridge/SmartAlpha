{
  "address": "0x5Fd60036C834A30Fc794D395D8e44A9BF92d6ad4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "juniorProfits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seniorProfits",
          "type": "uint256"
        }
      ],
      "name": "EpochEnd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentQueueBalance",
          "type": "uint256"
        }
      ],
      "name": "JuniorJoinEntryQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentQueueBalance",
          "type": "uint256"
        }
      ],
      "name": "JuniorJoinExitQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensOut",
          "type": "uint256"
        }
      ],
      "name": "JuniorRedeemTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingOut",
          "type": "uint256"
        }
      ],
      "name": "JuniorRedeemUnderlying",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PauseSystem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ResumeSystem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentQueueBalance",
          "type": "uint256"
        }
      ],
      "name": "SeniorJoinEntryQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentQueueBalance",
          "type": "uint256"
        }
      ],
      "name": "SeniorJoinExitQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensOut",
          "type": "uint256"
        }
      ],
      "name": "SeniorRedeemTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingOut",
          "type": "uint256"
        }
      ],
      "name": "SeniorRedeemUnderlying",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newModel",
          "type": "address"
        }
      ],
      "name": "SetAccountingModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "SetFeesOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercentage",
          "type": "uint256"
        }
      ],
      "name": "SetFeesPercentage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "SetPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newModel",
          "type": "address"
        }
      ],
      "name": "SetSeniorRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDAO",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDAO",
          "type": "address"
        }
      ],
      "name": "TransferDAO",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "TransferGuardian",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FEES_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountingModel",
      "outputs": [
        {
          "internalType": "contract IAccountingModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "advanceEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositJunior",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositSenior",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch1Start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochDownsideProtectionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochEntryPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochJuniorLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochSeniorLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochUpsideExposureRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateCurrentJuniorLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateCurrentJuniorTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateCurrentSeniorLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateCurrentSeniorTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountJuniorTokens",
          "type": "uint256"
        }
      ],
      "name": "exitJunior",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountSeniorTokens",
          "type": "uint256"
        }
      ],
      "name": "exitSenior",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentJuniorProfits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentSeniorProfits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEpochJuniorTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEpochSeniorTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "history_epochJuniorTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "history_epochSeniorTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracleAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seniorRateModelAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accountingModelAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "juniorTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seniorTokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epoch1Start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epochDuration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "juniorEntryQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "juniorExitQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juniorToken",
      "outputs": [
        {
          "internalType": "contract OwnableERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseSystem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queuedJuniorTokensBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queuedJuniorsUnderlyingIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queuedJuniorsUnderlyingOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queuedSeniorTokensBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queuedSeniorsUnderlyingIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queuedSeniorsUnderlyingOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemJuniorTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemJuniorUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemSeniorTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemSeniorUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resumeSystem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scaleFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "seniorEntryQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "seniorExitQueue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seniorRateModel",
      "outputs": [
        {
          "internalType": "contract ISeniorRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seniorToken",
      "outputs": [
        {
          "internalType": "contract OwnableERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newModel",
          "type": "address"
        }
      ],
      "name": "setAccountingModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setFeesOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "setFeesPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newModel",
          "type": "address"
        }
      ],
      "name": "setSeniorRateModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDAO",
          "type": "address"
        }
      ],
      "name": "transferDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "transferGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingInQueues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [
    "0xcdCD0ddeE98008287922803D60742f7571A3e8Ce",
    "0x558Ef269Bcc4cc9F2e14E3f4301231fbeb85d95F"
  ],
  "solcInputHash": "db9c5199da5e6f14fdc5cc69d9b2dfeb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorProfits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorProfits\",\"type\":\"uint256\"}],\"name\":\"EpochEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentQueueBalance\",\"type\":\"uint256\"}],\"name\":\"JuniorJoinEntryQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentQueueBalance\",\"type\":\"uint256\"}],\"name\":\"JuniorJoinExitQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"name\":\"JuniorRedeemTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingOut\",\"type\":\"uint256\"}],\"name\":\"JuniorRedeemUnderlying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseSystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ResumeSystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentQueueBalance\",\"type\":\"uint256\"}],\"name\":\"SeniorJoinEntryQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentQueueBalance\",\"type\":\"uint256\"}],\"name\":\"SeniorJoinExitQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"name\":\"SeniorRedeemTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingOut\",\"type\":\"uint256\"}],\"name\":\"SeniorRedeemUnderlying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"SetAccountingModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetFeesOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"SetFeesPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"SetPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"SetSeniorRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDAO\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDAO\",\"type\":\"address\"}],\"name\":\"TransferDAO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"TransferGuardian\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEES_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountingModel\",\"outputs\":[{\"internalType\":\"contract IAccountingModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advanceEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositJunior\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositSenior\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch1Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDownsideProtectionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochEntryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochJuniorLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSeniorLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochUpsideExposureRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateCurrentJuniorLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateCurrentJuniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateCurrentSeniorLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateCurrentSeniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountJuniorTokens\",\"type\":\"uint256\"}],\"name\":\"exitJunior\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSeniorTokens\",\"type\":\"uint256\"}],\"name\":\"exitSenior\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentJuniorProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSeniorProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochJuniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochSeniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"history_epochJuniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"history_epochSeniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorRateModelAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountingModelAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch1Start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"juniorEntryQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"juniorExitQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juniorToken\",\"outputs\":[{\"internalType\":\"contract OwnableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedJuniorTokensBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedJuniorsUnderlyingIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedJuniorsUnderlyingOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedSeniorTokensBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedSeniorsUnderlyingIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedSeniorsUnderlyingOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemJuniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemJuniorUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemSeniorUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seniorEntryQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seniorExitQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seniorRateModel\",\"outputs\":[{\"internalType\":\"contract ISeniorRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seniorToken\",\"outputs\":[{\"internalType\":\"contract OwnableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"setAccountingModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setFeesOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setFeesPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"setSeniorRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDAO\",\"type\":\"address\"}],\"name\":\"transferDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"transferGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingInQueues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"advanceEpoch()\":{\"details\":\"Epochs are automatically advanced/finalized if there are user interactions with the contract.If there are no interactions for one or multiple epochs, they will be skipped and the materializing ofprofits and losses will only happen as if only one epoch passed. We call this \\\"elastic epochs\\\".This function may also be called voluntarily by any party (including bots).\"},\"depositJunior(uint256)\":{\"details\":\"If the user already has a position in the queue, they can increase the amount by calling this function againIf a user is in the queue, they cannot exit it\",\"params\":{\"amount\":\"The amount of underlying the user wants to increase his queue position with\"}},\"depositSenior(uint256)\":{\"details\":\"If the user already has a position in the queue, they can increase the amount by calling this function againIf a user is in the queue, they cannot exit it\",\"params\":{\"amount\":\"The amount of underlying the user wants to increase his queue position with\"}},\"epochBalance()\":{\"returns\":{\"_0\":\"epoch balance\"}},\"estimateCurrentJuniorLiquidity()\":{\"returns\":{\"_0\":\"The estimated junior liquidity\"}},\"estimateCurrentJuniorTokenPrice()\":{\"returns\":{\"_0\":\"The estimated junior token price\"}},\"estimateCurrentSeniorLiquidity()\":{\"returns\":{\"_0\":\"The estimated senior liquidity\"}},\"estimateCurrentSeniorTokenPrice()\":{\"returns\":{\"_0\":\"The estimated senior token price\"}},\"exitJunior(uint256)\":{\"details\":\"User will join the exit queue and his junior tokens will be transferred back to the pool.Their tokens will be burned when the epoch is finalized and the underlying due will be set aside.Users can increase their queue amount but can't exit the queue\",\"params\":{\"amountJuniorTokens\":\"The amount of tokens the user wants to exit with\"}},\"exitSenior(uint256)\":{\"details\":\"User will join the exit queue and his senior tokens will be transferred back to the pool.Their tokens will be burned when the epoch is finalized and the underlying due will be set aside.Users can increase their queue amount but can't exit the queue\",\"params\":{\"amountSeniorTokens\":\"The amount of tokens the user wants to exit with\"}},\"feesAccrued()\":{\"details\":\"We consider fees any amount of underlying that is not accounted for in the epoch balance & queues\"},\"getCurrentEpoch()\":{\"returns\":{\"_0\":\"The id of the current epoch\"}},\"getCurrentJuniorProfits()\":{\"details\":\"It always returns 0 if the price went down.\",\"returns\":{\"_0\":\"The amount, in pool tokens, that is considered profit for the juniors\"}},\"getCurrentSeniorProfits()\":{\"details\":\"It always returns 0 if the price went up.\",\"returns\":{\"_0\":\"The amount, in pool tokens, that is considered loss for the juniors\"}},\"getEpochJuniorTokenPrice()\":{\"details\":\"If there's no supply, it returns 1 (scaled by scaleFactor).It does not take into account the current profits and losses.\",\"returns\":{\"_0\":\"The price of a junior token in pool tokens\"}},\"getEpochSeniorTokenPrice()\":{\"details\":\"If there's no supply, it returns 1 (scaled by scaleFactor).It does not take into account the current profits and losses.\",\"returns\":{\"_0\":\"The price of a senior token in pool tokens\"}},\"initialize(address,address,address,address,address,address,uint256,uint256)\":{\"details\":\"Junior and Senior tokens must be owner by this contract or the function will revert.\",\"params\":{\"_epoch1Start\":\"Timestamp at which the first epoch begins\",\"_epochDuration\":\"Duration of the epoch in seconds\",\"accountingModelAddr\":\"Address of the accounting model (used to determine the junior or senior losses for an epoch)\",\"juniorTokenAddr\":\"Address of the junior token (ERC20)\",\"oracleAddr\":\"Address of the price oracle for the pool token\",\"poolTokenAddr\":\"Address of the pool token\",\"seniorRateModelAddr\":\"Address of the senior rate model (used to calculate upside exposure and downside protection rates)\",\"seniorTokenAddr\":\"Address of the senior token (ERC20)\"}},\"pauseSystem()\":{\"details\":\"Callable by DAO or Guardian. It will block any junior & senior deposits until resumed.\"},\"redeemJuniorTokens()\":{\"details\":\"User will receive an amount of junior tokens corresponding to his underlying balance converted at the price the epoch was finalizedThis only works for past epochs and will revert if called for current or future epochs.\"},\"redeemJuniorUnderlying()\":{\"details\":\"Only works if the user signaled the intention to exit the pool by entering the queue for that epoch.Can only be called for a previous epoch and will revert for current and future epochs.At this point, the junior tokens were burned by the contract and the underlying was set aside.\"},\"redeemSeniorTokens()\":{\"details\":\"User will receive an amount of senior tokens corresponding to his underlying balance converted at the price the epoch was finalizedThis only works for past epochs and will revert if called for current or future epochs.\"},\"redeemSeniorUnderlying()\":{\"details\":\"Only works if the user signaled the intention to exit the pool by entering the queue for that epoch.Can only be called for a previous epoch and will revert for current and future epochs.At this point, the senior tokens were burned by the contract and the underlying was set aside.\"},\"resumeSystem()\":{\"details\":\"Callable by DAO or Guardian. It will resume deposits.\"},\"setAccountingModel(address)\":{\"details\":\"Only callable by DAO. The address of the new contract must have code.\",\"params\":{\"newModel\":\"The address of the new model\"}},\"setFeesOwner(address)\":{\"details\":\"Only callable by DAO. The new owner must not be 0 address.\",\"params\":{\"newOwner\":\"The address to which fees will be transferred\"}},\"setFeesPercentage(uint256)\":{\"details\":\"Only callable by DAO. If the percentage is greater than 0, it must also have a fees owner.\",\"params\":{\"percentage\":\"The percentage of profits to be taken as fee\"}},\"setPriceOracle(address)\":{\"details\":\"Only callable by DAO. The address of the new price oracle must have contract code.\",\"params\":{\"newPriceOracle\":\"The address of the new price oracle contract\"}},\"setSeniorRateModel(address)\":{\"details\":\"Only callable by DAO. The address of the new contract must have code.\",\"params\":{\"newModel\":\"The address of the new model\"}},\"transferDAO(address)\":{\"details\":\"Only callable by the current DAO. The new dao cannot be address(0) or the same dao.\",\"params\":{\"newDAO\":\"The address of the new dao\"}},\"transferFees()\":{\"details\":\"Anyone can call but fees are transferred to fees owner. Reverts if no fees accrued.\"},\"transferGuardian(address)\":{\"details\":\"Callable by the current DAO or the current Guardian. The new Guardian cannot be address(0) or the same as before.\",\"params\":{\"newGuardian\":\"The address of the new Guardian\"}},\"underlyingInQueues()\":{\"returns\":{\"_0\":\"amount of underlying in the queues\"}}},\"title\":\"SMART Alpha\",\"version\":1},\"userdoc\":{\"events\":{\"EpochEnd(uint256,uint256,uint256)\":{\"notice\":\"Logs an epoch end\"},\"FeesTransfer(address,address,uint256)\":{\"notice\":\"Logs a transfer of fees\"},\"JuniorJoinEntryQueue(address,uint256,uint256,uint256)\":{\"notice\":\"Logs a deposit of a junior\"},\"JuniorJoinExitQueue(address,uint256,uint256,uint256)\":{\"notice\":\"Logs an exit (1st step) of a junior\"},\"JuniorRedeemTokens(address,uint256,uint256)\":{\"notice\":\"Logs a redeem (2nd step of deposit) of a junior\"},\"JuniorRedeemUnderlying(address,uint256,uint256)\":{\"notice\":\"Logs an exit (2nd step) of a junior\"},\"PauseSystem()\":{\"notice\":\"Logs a system pause\"},\"ResumeSystem()\":{\"notice\":\"logs a system resume\"},\"SeniorJoinEntryQueue(address,uint256,uint256,uint256)\":{\"notice\":\"Logs a deposit of a senior\"},\"SeniorJoinExitQueue(address,uint256,uint256,uint256)\":{\"notice\":\"Logs an exit (1st step) of a senior\"},\"SeniorRedeemTokens(address,uint256,uint256)\":{\"notice\":\"Logs a redeem (2nd step of deposit) of a senior\"},\"SeniorRedeemUnderlying(address,uint256,uint256)\":{\"notice\":\"Logs an exit (2nd step) of a senior\"},\"SetAccountingModel(address,address)\":{\"notice\":\"Logs a change of accounting model contract\"},\"SetFeesOwner(address,address)\":{\"notice\":\"Logs a change of fees owner\"},\"SetFeesPercentage(uint256,uint256)\":{\"notice\":\"Logs a change of fees percentage\"},\"SetPriceOracle(address,address)\":{\"notice\":\"logs a change of price oracle\"},\"SetSeniorRateModel(address,address)\":{\"notice\":\"Logs a change of senior rate model contract\"},\"TransferDAO(address,address)\":{\"notice\":\"Logs a transfer of dao power to a new address\"},\"TransferGuardian(address,address)\":{\"notice\":\"Logs a transfer of Guardian power to a new address\"}},\"kind\":\"user\",\"methods\":{\"advanceEpoch()\":{\"notice\":\"Advance/finalize an epoch\"},\"depositJunior(uint256)\":{\"notice\":\"Signal the entry into the pool as a junior\"},\"depositSenior(uint256)\":{\"notice\":\"Signal the entry into the pool as a senior\"},\"epoch()\":{\"notice\":\"epoch accounting\"},\"epochBalance()\":{\"notice\":\"Calculate the epoch balance\"},\"estimateCurrentJuniorLiquidity()\":{\"notice\":\"Return the junior liquidity taking into account the current, unrealized, profits and losses\"},\"estimateCurrentJuniorTokenPrice()\":{\"notice\":\"Return the current junior token price taking into account the current, unrealized, profits and losses\"},\"estimateCurrentSeniorLiquidity()\":{\"notice\":\"Return the senior liquidity taking into account the current, unrealized, profits and losses\"},\"estimateCurrentSeniorTokenPrice()\":{\"notice\":\"Return the current senior token price taking into account the current, unrealized, profits and losses\"},\"exitJunior(uint256)\":{\"notice\":\"Signal the intention to leave the pool as a junior\"},\"exitSenior(uint256)\":{\"notice\":\"Signal the intention to leave the pool as a senior\"},\"feesAccrued()\":{\"notice\":\"Calculate the total fees accrued\"},\"getCurrentEpoch()\":{\"notice\":\"Calculates the current epoch based on the start of the first epoch and the epoch duration\"},\"getCurrentJuniorProfits()\":{\"notice\":\"Calculates the junior profits based on current pool conditions\"},\"getCurrentSeniorProfits()\":{\"notice\":\"Calculates the junior losses (in other words, senior profits) based on the current pool conditions\"},\"getEpochJuniorTokenPrice()\":{\"notice\":\"Return the price of the junior token for the current epoch\"},\"getEpochSeniorTokenPrice()\":{\"notice\":\"Return the price of the senior token for the current epoch\"},\"history_epochJuniorTokenPrice(uint256)\":{\"notice\":\"history management\"},\"initialize(address,address,address,address,address,address,uint256,uint256)\":{\"notice\":\"Initialize the SmartAlpha system\"},\"pauseSystem()\":{\"notice\":\"Pause the deposits into the system\"},\"redeemJuniorTokens()\":{\"notice\":\"Redeem the junior tokens generated for a user that participated in the queue at a specific epoch\"},\"redeemJuniorUnderlying()\":{\"notice\":\"Redeem the underlying for an exited epoch\"},\"redeemSeniorTokens()\":{\"notice\":\"Redeem the senior tokens generated for a user that participated in the queue at a specific epoch\"},\"redeemSeniorUnderlying()\":{\"notice\":\"Redeem the underlying for an exited epoch\"},\"resumeSystem()\":{\"notice\":\"Resume the deposits into the system\"},\"setAccountingModel(address)\":{\"notice\":\"Change the accounting model contract\"},\"setFeesOwner(address)\":{\"notice\":\"Change the owner of the fees\"},\"setFeesPercentage(uint256)\":{\"notice\":\"Change the percentage of the fees applied\"},\"setPriceOracle(address)\":{\"notice\":\"Change the price oracle\"},\"setSeniorRateModel(address)\":{\"notice\":\"Change the senior rate model contract\"},\"transferDAO(address)\":{\"notice\":\"Transfer the DAO to a new address\"},\"transferFees()\":{\"notice\":\"Transfer the accrued fees to the fees owner\"},\"transferGuardian(address)\":{\"notice\":\"Transfer the Guardian to a new address\"},\"underlyingInQueues()\":{\"notice\":\"Return the total amount of underlying in the queues\"}},\"notice\":\"This contract implements the main logic of the system.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartAlpha.sol\":\"SmartAlpha\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/Governed.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/ISeniorRateModel.sol\\\";\\nimport \\\"./interfaces/IAccountingModel.sol\\\";\\nimport \\\"./SmartAlphaEvents.sol\\\";\\n\\n/// @notice Governance functions for SmartAlpha\\n/// @dev It defines a DAO and a Guardian\\n/// From a privilege perspective, the DAO is also considered Guardian, allowing it to execute any action\\n/// that the Guardian can do.\\nabstract contract Governed is SmartAlphaEvents {\\n    address public dao;\\n    address public guardian;\\n\\n    bool public paused;\\n\\n    IPriceOracle public priceOracle;\\n    ISeniorRateModel public seniorRateModel;\\n    IAccountingModel public accountingModel;\\n\\n    uint256 public constant MAX_FEES_PERCENTAGE = 100 * 10 ** 16;\\n    address public feesOwner;\\n    uint256 public feesPercentage;\\n\\n    constructor (address _dao, address _guardian) {\\n        require(_dao != address(0), \\\"invalid address\\\");\\n        require(_guardian != address(0), \\\"invalid address\\\");\\n\\n        dao = _dao;\\n        guardian = _guardian;\\n    }\\n\\n    /// @notice Transfer the DAO to a new address\\n    /// @dev Only callable by the current DAO. The new dao cannot be address(0) or the same dao.\\n    /// @param newDAO The address of the new dao\\n    function transferDAO(address newDAO) public {\\n        enforceCallerDAO();\\n        require(newDAO != address(0), \\\"invalid address\\\");\\n        require(newDAO != dao, \\\"!new\\\");\\n\\n        emit TransferDAO(dao, newDAO);\\n\\n        dao = newDAO;\\n    }\\n\\n    /// @notice Transfer the Guardian to a new address\\n    /// @dev Callable by the current DAO or the current Guardian. The new Guardian cannot be address(0)\\n    /// or the same as before.\\n    /// @param newGuardian The address of the new Guardian\\n    function transferGuardian(address newGuardian) public {\\n        enforceCallerGuardian();\\n        require(newGuardian != address(0), \\\"invalid address\\\");\\n        require(newGuardian != guardian, \\\"!new\\\");\\n\\n        emit TransferGuardian(guardian, newGuardian);\\n\\n        guardian = newGuardian;\\n    }\\n\\n    /// @notice Pause the deposits into the system\\n    /// @dev Callable by DAO or Guardian. It will block any junior & senior deposits until resumed.\\n    function pauseSystem() public {\\n        enforceCallerGuardian();\\n        require(!paused, \\\"paused\\\");\\n\\n        paused = true;\\n\\n        emit PauseSystem();\\n    }\\n\\n    /// @notice Resume the deposits into the system\\n    /// @dev Callable by DAO or Guardian. It will resume deposits.\\n    function resumeSystem() public {\\n        enforceCallerGuardian();\\n        require(paused, \\\"!paused\\\");\\n\\n        paused = false;\\n\\n        emit ResumeSystem();\\n    }\\n\\n    /// @notice Change the price oracle\\n    /// @dev Only callable by DAO. The address of the new price oracle must have contract code.\\n    /// @param newPriceOracle The address of the new price oracle contract\\n    function setPriceOracle(address newPriceOracle) public {\\n        enforceCallerDAO();\\n        enforceHasContractCode(newPriceOracle, \\\"invalid address\\\");\\n\\n        emit SetPriceOracle(address(priceOracle), newPriceOracle);\\n\\n        priceOracle = IPriceOracle(newPriceOracle);\\n    }\\n\\n    /// @notice Change the senior rate model contract\\n    /// @dev Only callable by DAO. The address of the new contract must have code.\\n    /// @param newModel The address of the new model\\n    function setSeniorRateModel(address newModel) public {\\n        enforceCallerDAO();\\n        enforceHasContractCode(newModel, \\\"invalid address\\\");\\n\\n        emit SetSeniorRateModel(address(seniorRateModel), newModel);\\n\\n        seniorRateModel = ISeniorRateModel(newModel);\\n    }\\n\\n    /// @notice Change the accounting model contract\\n    /// @dev Only callable by DAO. The address of the new contract must have code.\\n    /// @param newModel The address of the new model\\n    function setAccountingModel(address newModel) public {\\n        enforceCallerDAO();\\n        enforceHasContractCode(newModel, \\\"invalid address\\\");\\n\\n        emit SetAccountingModel(address(accountingModel), newModel);\\n\\n        accountingModel = IAccountingModel(newModel);\\n    }\\n\\n    /// @notice Change the owner of the fees\\n    /// @dev Only callable by DAO. The new owner must not be 0 address.\\n    /// @param newOwner The address to which fees will be transferred\\n    function setFeesOwner(address newOwner) public {\\n        enforceCallerDAO();\\n        require(newOwner != address(0), \\\"invalid address\\\");\\n\\n        emit SetFeesOwner(feesOwner, newOwner);\\n\\n        feesOwner = newOwner;\\n    }\\n\\n    /// @notice Change the percentage of the fees applied\\n    /// @dev Only callable by DAO. If the percentage is greater than 0, it must also have a fees owner.\\n    /// @param percentage The percentage of profits to be taken as fee\\n    function setFeesPercentage(uint256 percentage) public {\\n        enforceCallerDAO();\\n        if (percentage > 0) {\\n            require(feesOwner != address(0), \\\"no fees owner\\\");\\n        }\\n        require(percentage <= MAX_FEES_PERCENTAGE, \\\"max percentage exceeded\\\");\\n\\n        emit SetFeesPercentage(feesPercentage, percentage);\\n\\n        feesPercentage = percentage;\\n    }\\n\\n    /// @notice Helper function to enforce that the call comes from the DAO\\n    /// @dev Reverts the execution if msg.sender is not the DAO.\\n    function enforceCallerDAO() internal view {\\n        require(msg.sender == dao, \\\"!dao\\\");\\n    }\\n\\n    /// @notice Helper function to enforce that the call comes from the Guardian\\n    /// @dev Reverts the execution if msg.sender is not the Guardian.\\n    function enforceCallerGuardian() internal view {\\n        require(msg.sender == guardian || msg.sender == dao, \\\"!guardian\\\");\\n    }\\n\\n    /// @notice Helper function to block any action while the system is paused\\n    /// @dev Reverts the execution if the system is paused\\n    function enforceSystemNotPaused() internal view {\\n        require(!paused, \\\"paused\\\");\\n    }\\n\\n    /// @notice Helper function to check for contract code at given address\\n    /// @dev Reverts if there's no code at the given address.\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x4b1501e30f351d73abbbf8ea08c71811fc0f934110a5921ac00cb83f019440f3\",\"license\":\"Apache-2.0\"},\"contracts/OwnableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title A token that allows advanced privileges to its owner\\n/// @notice Allows the owner to mint, burn and transfer tokens without requiring explicit user approval\\ncontract OwnableERC20 is ERC20, Ownable {\\n    uint8 private _dec;\\n\\n    constructor(string memory name, string memory symbol, uint8 _decimals) ERC20(name, symbol) {\\n        _dec = _decimals;\\n    }\\n\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    /// For example, if `decimals` equals `2`, a balance of `505` tokens should\\n    /// be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    ///\\n    /// Tokens usually opt for a value of 18, imitating the relationship between\\n    /// Ether and Wei. This is the value {ERC20} uses, unless this function is\\n    /// overridden;\\n    ///\\n    /// NOTE: This information is only used for _display_ purposes: it in\\n    /// no way affects any of the arithmetic of the contract, including\\n    /// {IERC20-balanceOf} and {IERC20-transfer}.\\n    function decimals() public view override returns (uint8) {\\n        return _dec;\\n    }\\n\\n    /// @notice Allow the owner of the contract to mint an amount of tokens to the specified user\\n    /// @dev Only callable by owner\\n    /// @dev Emits a Transfer from the 0 address\\n    /// @param user The address of the user to mint tokens for\\n    /// @param amount The amount of tokens to mint\\n    function mint(address user, uint256 amount) public onlyOwner {\\n        _mint(user, amount);\\n    }\\n\\n    /// @notice Allow the owner of the contract to burn an amount of tokens from the specified user address\\n    /// @dev Only callable by owner\\n    /// @dev The user's balance must be at least equal to the amount specified\\n    /// @dev Emits a Transfer to the 0 address\\n    /// @param user The address of the user from which to burn tokens\\n    /// @param amount The amount of tokens to burn\\n    function burn(address user, uint256 amount) public onlyOwner {\\n        _burn(user, amount);\\n    }\\n\\n    /// @notice Allow the owner of the contract to transfer an amount of tokens from sender to recipient\\n    /// @dev Only callable by owner\\n    /// @dev Acts just like transferFrom but without the allowance check\\n    /// @param sender The address of the account from which to transfer tokens\\n    /// @param recipient The address of the account to which to transfer tokens\\n    /// @param amount The amount of tokens to transfer\\n    /// @return bool (always true)\\n    function transferAsOwner(address sender, address recipient, uint256 amount) public onlyOwner returns (bool){\\n        _transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2e94bd4cb9ba79db4f766e43e907ed79883ce6dcd3c3f395632ddade9f5a3d78\",\"license\":\"Apache-2.0\"},\"contracts/SmartAlpha.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./OwnableERC20.sol\\\";\\nimport \\\"./interfaces/ISeniorRateModel.sol\\\";\\nimport \\\"./Governed.sol\\\";\\n\\n/// @title SMART Alpha\\n/// @notice This contract implements the main logic of the system.\\ncontract SmartAlpha is Governed {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant public scaleFactor = 10 ** 18;\\n\\n    bool public initialized;\\n\\n    IERC20 public poolToken;\\n\\n    OwnableERC20 public juniorToken;\\n    OwnableERC20 public seniorToken;\\n\\n    uint256 public epoch1Start;\\n    uint256 public epochDuration;\\n\\n    /// epoch accounting\\n    uint256 public epoch;\\n    uint256 public epochSeniorLiquidity;\\n    uint256 public epochJuniorLiquidity;\\n    uint256 public epochUpsideExposureRate;\\n    uint256 public epochDownsideProtectionRate;\\n    uint256 public epochEntryPrice;\\n\\n    uint256 public queuedJuniorsUnderlyingIn;\\n    uint256 public queuedJuniorsUnderlyingOut;\\n    uint256 public queuedJuniorTokensBurn;\\n\\n    uint256 public queuedSeniorsUnderlyingIn;\\n    uint256 public queuedSeniorsUnderlyingOut;\\n    uint256 public queuedSeniorTokensBurn;\\n\\n    /// history management\\n    mapping(uint256 => uint256) public history_epochJuniorTokenPrice;\\n    mapping(uint256 => uint256) public history_epochSeniorTokenPrice;\\n\\n    // a user can have only one queue position at a time\\n    // if they try a new deposit while there's a queue position redeemable, it will be automatically redeemed\\n    struct QueuePosition {\\n        uint256 epoch;\\n        uint256 amount;\\n    }\\n\\n    mapping(address => QueuePosition) public juniorEntryQueue;\\n    mapping(address => QueuePosition) public juniorExitQueue;\\n    mapping(address => QueuePosition) public seniorEntryQueue;\\n    mapping(address => QueuePosition) public seniorExitQueue;\\n\\n    constructor (address _dao, address _guardian) Governed(_dao, _guardian) {}\\n\\n    /// @notice Initialize the SmartAlpha system\\n    /// @dev Junior and Senior tokens must be owner by this contract or the function will revert.\\n    /// @param poolTokenAddr Address of the pool token\\n    /// @param oracleAddr Address of the price oracle for the pool token\\n    /// @param seniorRateModelAddr Address of the senior rate model (used to calculate upside exposure and downside protection rates)\\n    /// @param accountingModelAddr Address of the accounting model (used to determine the junior or senior losses for an epoch)\\n    /// @param juniorTokenAddr Address of the junior token (ERC20)\\n    /// @param seniorTokenAddr Address of the senior token (ERC20)\\n    /// @param _epoch1Start Timestamp at which the first epoch begins\\n    /// @param _epochDuration Duration of the epoch in seconds\\n    function initialize(\\n        address poolTokenAddr,\\n        address oracleAddr,\\n        address seniorRateModelAddr,\\n        address accountingModelAddr,\\n        address juniorTokenAddr,\\n        address seniorTokenAddr,\\n        uint256 _epoch1Start,\\n        uint256 _epochDuration\\n    ) public {\\n        require(!initialized, \\\"contract already initialized\\\");\\n        initialized = true;\\n\\n        enforceCallerDAO();\\n        setPriceOracle(oracleAddr);\\n        setSeniorRateModel(seniorRateModelAddr);\\n        setAccountingModel(accountingModelAddr);\\n\\n        require(poolTokenAddr != address(0), \\\"pool token can't be 0x0\\\");\\n        require(juniorTokenAddr != address(0), \\\"junior token can't be 0x0\\\");\\n        require(seniorTokenAddr != address(0), \\\"senior token can't be 0x0\\\");\\n\\n        poolToken = IERC20(poolTokenAddr);\\n\\n        juniorToken = OwnableERC20(juniorTokenAddr);\\n        require(juniorToken.owner() == address(this), \\\"junior token owner must be SA\\\");\\n\\n        seniorToken = OwnableERC20(seniorTokenAddr);\\n        require(seniorToken.owner() == address(this), \\\"senior token owner must be SA\\\");\\n\\n        epoch1Start = _epoch1Start;\\n        epochDuration = _epochDuration;\\n    }\\n\\n    /// @notice Advance/finalize an epoch\\n    /// @dev Epochs are automatically advanced/finalized if there are user interactions with the contract.\\n    /// @dev If there are no interactions for one or multiple epochs, they will be skipped and the materializing of\\n    /// @dev profits and losses will only happen as if only one epoch passed. We call this \\\"elastic epochs\\\".\\n    /// @dev This function may also be called voluntarily by any party (including bots).\\n    function advanceEpoch() public {\\n        uint256 currentEpoch = getCurrentEpoch();\\n\\n        if (epoch >= currentEpoch) {\\n            return;\\n        }\\n\\n        // finalize the current epoch and take the fee from the side that made profits this epoch\\n        uint256 seniorProfits = getCurrentSeniorProfits();\\n        uint256 juniorProfits = getCurrentJuniorProfits();\\n        if (seniorProfits > 0) {\\n            uint256 fee = seniorProfits * feesPercentage / scaleFactor;\\n            epochJuniorLiquidity = epochJuniorLiquidity - seniorProfits;\\n            epochSeniorLiquidity = epochSeniorLiquidity + (seniorProfits - fee);\\n        } else if (juniorProfits > 0) {\\n            uint256 fee = juniorProfits * feesPercentage / scaleFactor;\\n            epochSeniorLiquidity = epochSeniorLiquidity - juniorProfits;\\n            epochJuniorLiquidity = epochJuniorLiquidity + (juniorProfits - fee);\\n        }\\n\\n        emit EpochEnd(epoch, juniorProfits, seniorProfits);\\n\\n        // set the epoch entry price to the current price, effectively resetting profits and losses to 0\\n        epochEntryPrice = priceOracle.getPrice();\\n\\n        uint256 juniorUnderlyingOut = _processJuniorQueues();\\n        uint256 seniorUnderlyingOut = _processSeniorQueues();\\n\\n        // move the liquidity from the entry queue to the epoch balance & the exited liquidity from the epoch to the exit queue\\n        epochSeniorLiquidity = epochSeniorLiquidity - seniorUnderlyingOut + queuedSeniorsUnderlyingIn;\\n        queuedSeniorsUnderlyingOut += seniorUnderlyingOut;\\n        queuedSeniorsUnderlyingIn = 0;\\n\\n        epochJuniorLiquidity = epochJuniorLiquidity - juniorUnderlyingOut + queuedJuniorsUnderlyingIn;\\n        queuedJuniorsUnderlyingOut += juniorUnderlyingOut;\\n        queuedJuniorsUnderlyingIn = 0;\\n\\n        // reset the queue of tokens to burn\\n        queuedJuniorTokensBurn = 0;\\n        queuedSeniorTokensBurn = 0;\\n\\n        // update the upside exposure and downside protection rates based on the new pool composition (after processing the entry and exit queues)\\n        (epochUpsideExposureRate, epochDownsideProtectionRate) = seniorRateModel.getRates(epochJuniorLiquidity, epochSeniorLiquidity);\\n\\n        // set the stored epoch to the current epoch\\n        epoch = currentEpoch;\\n    }\\n\\n    /// @notice Signal the entry into the pool as a junior\\n    /// @dev If the user already has a position in the queue, they can increase the amount by calling this function again\\n    /// @dev If a user is in the queue, they cannot exit it\\n    /// @param amount The amount of underlying the user wants to increase his queue position with\\n    function depositJunior(uint256 amount) public {\\n        enforceSystemNotPaused();\\n        advanceEpoch();\\n\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n        require(poolToken.allowance(msg.sender, address(this)) >= amount, \\\"not enough allowance\\\");\\n\\n        QueuePosition storage pos = juniorEntryQueue[msg.sender];\\n\\n        // if the user already has a position for an older epoch that was not redeemed, do it automatically\\n        // after this operation, pos.amount would be set to 0\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemJuniorTokens();\\n        }\\n\\n        // update the stored position's epoch to the current one\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        // add the amount to the queue to be converted into junior tokens when the epoch ends\\n        queuedJuniorsUnderlyingIn += amount;\\n\\n        uint256 newBalance = pos.amount + amount;\\n        pos.amount = newBalance;\\n\\n        poolToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit JuniorJoinEntryQueue(msg.sender, epoch, amount, newBalance);\\n    }\\n\\n    /// @notice Redeem the junior tokens generated for a user that participated in the queue at a specific epoch\\n    /// @dev User will receive an amount of junior tokens corresponding to his underlying balance converted at the price the epoch was finalized\\n    /// @dev This only works for past epochs and will revert if called for current or future epochs.\\n    function redeemJuniorTokens() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = juniorEntryQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 underlyingAmount = pos.amount;\\n        require(underlyingAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochJuniorTokenPrice[pos.epoch];\\n        uint256 amountJuniorTokensDue = underlyingAmount * scaleFactor / price;\\n\\n        juniorToken.transfer(msg.sender, amountJuniorTokensDue);\\n\\n        emit JuniorRedeemTokens(msg.sender, pos.epoch, amountJuniorTokensDue);\\n    }\\n\\n    /// @notice Signal the entry into the pool as a senior\\n    /// @dev If the user already has a position in the queue, they can increase the amount by calling this function again\\n    /// @dev If a user is in the queue, they cannot exit it\\n    /// @param amount The amount of underlying the user wants to increase his queue position with\\n    function depositSenior(uint256 amount) public {\\n        enforceSystemNotPaused();\\n        advanceEpoch();\\n\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n        require(poolToken.allowance(msg.sender, address(this)) >= amount, \\\"not enough allowance\\\");\\n\\n        QueuePosition storage pos = seniorEntryQueue[msg.sender];\\n\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemSeniorTokens();\\n        }\\n\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        queuedSeniorsUnderlyingIn += amount;\\n\\n        uint256 newBalance = pos.amount + amount;\\n        pos.amount = newBalance;\\n\\n        poolToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit SeniorJoinEntryQueue(msg.sender, epoch, amount, newBalance);\\n    }\\n\\n    /// @notice Redeem the senior tokens generated for a user that participated in the queue at a specific epoch\\n    /// @dev User will receive an amount of senior tokens corresponding to his underlying balance converted at the price the epoch was finalized\\n    /// @dev This only works for past epochs and will revert if called for current or future epochs.\\n    function redeemSeniorTokens() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = seniorEntryQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 underlyingAmount = pos.amount;\\n        require(underlyingAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochSeniorTokenPrice[pos.epoch];\\n        uint256 amountSeniorTokensDue = underlyingAmount * scaleFactor / price;\\n\\n        seniorToken.transfer(msg.sender, amountSeniorTokensDue);\\n\\n        emit SeniorRedeemTokens(msg.sender, pos.epoch, amountSeniorTokensDue);\\n    }\\n\\n    /// @notice Signal the intention to leave the pool as a junior\\n    /// @dev User will join the exit queue and his junior tokens will be transferred back to the pool.\\n    /// @dev Their tokens will be burned when the epoch is finalized and the underlying due will be set aside.\\n    /// @dev Users can increase their queue amount but can't exit the queue\\n    /// @param amountJuniorTokens The amount of tokens the user wants to exit with\\n    function exitJunior(uint256 amountJuniorTokens) public {\\n        advanceEpoch();\\n\\n        uint256 balance = juniorToken.balanceOf(msg.sender);\\n        require(balance >= amountJuniorTokens, \\\"not enough balance\\\");\\n\\n        queuedJuniorTokensBurn += amountJuniorTokens;\\n\\n        QueuePosition storage pos = juniorExitQueue[msg.sender];\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemJuniorUnderlying();\\n        }\\n\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        uint256 newBalance = pos.amount + amountJuniorTokens;\\n        pos.amount = newBalance;\\n\\n        juniorToken.transferAsOwner(msg.sender, address(this), amountJuniorTokens);\\n\\n        emit JuniorJoinExitQueue(msg.sender, epoch, amountJuniorTokens, newBalance);\\n    }\\n\\n    /// @notice Redeem the underlying for an exited epoch\\n    /// @dev Only works if the user signaled the intention to exit the pool by entering the queue for that epoch.\\n    /// @dev Can only be called for a previous epoch and will revert for current and future epochs.\\n    /// @dev At this point, the junior tokens were burned by the contract and the underlying was set aside.\\n    function redeemJuniorUnderlying() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = juniorExitQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 juniorTokenAmount = pos.amount;\\n        require(juniorTokenAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochJuniorTokenPrice[pos.epoch];\\n        uint256 underlyingDue = juniorTokenAmount * price / scaleFactor;\\n\\n        queuedJuniorsUnderlyingOut -= underlyingDue;\\n\\n        poolToken.safeTransfer(msg.sender, underlyingDue);\\n\\n        emit JuniorRedeemUnderlying(msg.sender, pos.epoch, underlyingDue);\\n    }\\n\\n    /// @notice Signal the intention to leave the pool as a senior\\n    /// @dev User will join the exit queue and his senior tokens will be transferred back to the pool.\\n    /// @dev Their tokens will be burned when the epoch is finalized and the underlying due will be set aside.\\n    /// @dev Users can increase their queue amount but can't exit the queue\\n    /// @param amountSeniorTokens The amount of tokens the user wants to exit with\\n    function exitSenior(uint256 amountSeniorTokens) public {\\n        advanceEpoch();\\n\\n        uint256 balance = seniorToken.balanceOf(msg.sender);\\n        require(balance >= amountSeniorTokens, \\\"not enough balance\\\");\\n\\n        queuedSeniorTokensBurn += amountSeniorTokens;\\n\\n        QueuePosition storage pos = seniorExitQueue[msg.sender];\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemSeniorUnderlying();\\n        }\\n\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        uint256 newBalance = pos.amount + amountSeniorTokens;\\n        pos.amount = newBalance;\\n\\n        seniorToken.transferAsOwner(msg.sender, address(this), amountSeniorTokens);\\n\\n        emit SeniorJoinExitQueue(msg.sender, epoch, amountSeniorTokens, newBalance);\\n    }\\n\\n    /// @notice Redeem the underlying for an exited epoch\\n    /// @dev Only works if the user signaled the intention to exit the pool by entering the queue for that epoch.\\n    /// @dev Can only be called for a previous epoch and will revert for current and future epochs.\\n    /// @dev At this point, the senior tokens were burned by the contract and the underlying was set aside.\\n    function redeemSeniorUnderlying() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = seniorExitQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 seniorTokenAmount = pos.amount;\\n        require(seniorTokenAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochSeniorTokenPrice[pos.epoch];\\n        uint256 underlyingDue = seniorTokenAmount * price / scaleFactor;\\n\\n        queuedSeniorsUnderlyingOut -= underlyingDue;\\n\\n        poolToken.safeTransfer(msg.sender, underlyingDue);\\n\\n        emit SeniorRedeemUnderlying(msg.sender, pos.epoch, underlyingDue);\\n    }\\n\\n    /// @notice Transfer the accrued fees to the fees owner\\n    /// @dev Anyone can call but fees are transferred to fees owner. Reverts if no fees accrued.\\n    function transferFees() public {\\n        uint256 amount = feesAccrued();\\n        require(amount > 0, \\\"no fees\\\");\\n        require(feesOwner != address(0), \\\"no fees owner\\\");\\n\\n        // assumption: if there are fees accrued, it means there was an owner at some point\\n        // since the percentage cannot be set without an owner and the owner can't be set to address(0) later\\n        poolToken.safeTransfer(feesOwner, amount);\\n\\n        emit FeesTransfer(msg.sender, feesOwner, amount);\\n    }\\n\\n    /// @notice Calculates the current epoch based on the start of the first epoch and the epoch duration\\n    /// @return The id of the current epoch\\n    function getCurrentEpoch() public view returns (uint256) {\\n        if (block.timestamp < epoch1Start) {\\n            return 0;\\n        }\\n\\n        return (block.timestamp - epoch1Start) / epochDuration + 1;\\n    }\\n\\n    /// @notice Calculates the junior profits based on current pool conditions\\n    /// @dev It always returns 0 if the price went down.\\n    /// @return The amount, in pool tokens, that is considered profit for the juniors\\n    function getCurrentJuniorProfits() public view returns (uint256) {\\n        uint256 currentPrice = priceOracle.getPrice();\\n\\n        return accountingModel.calcJuniorProfits(\\n            epochEntryPrice,\\n            currentPrice,\\n            epochUpsideExposureRate,\\n            epochSeniorLiquidity,\\n            epochBalance()\\n        );\\n    }\\n\\n    /// @notice Calculates the junior losses (in other words, senior profits) based on the current pool conditions\\n    /// @dev It always returns 0 if the price went up.\\n    /// @return The amount, in pool tokens, that is considered loss for the juniors\\n    function getCurrentSeniorProfits() public view returns (uint256) {\\n        uint256 currentPrice = priceOracle.getPrice();\\n\\n        return accountingModel.calcSeniorProfits(\\n            epochEntryPrice,\\n            currentPrice,\\n            epochDownsideProtectionRate,\\n            epochSeniorLiquidity,\\n            epochBalance()\\n        );\\n    }\\n\\n    /// @notice Calculate the epoch balance\\n    /// @return epoch balance\\n    function epochBalance() public view returns (uint256) {\\n        return epochJuniorLiquidity + epochSeniorLiquidity;\\n    }\\n\\n    /// @notice Return the total amount of underlying in the queues\\n    /// @return amount of underlying in the queues\\n    function underlyingInQueues() public view returns (uint256) {\\n        return queuedJuniorsUnderlyingIn + queuedSeniorsUnderlyingIn + queuedJuniorsUnderlyingOut + queuedSeniorsUnderlyingOut;\\n    }\\n\\n    /// @notice Calculate the total fees accrued\\n    /// @dev We consider fees any amount of underlying that is not accounted for in the epoch balance & queues\\n    function feesAccrued() public view returns (uint256) {\\n        return poolToken.balanceOf(address(this)) - epochBalance() - underlyingInQueues();\\n    }\\n\\n    /// @notice Return the price of the junior token for the current epoch\\n    /// @dev If there's no supply, it returns 1 (scaled by scaleFactor).\\n    /// @dev It does not take into account the current profits and losses.\\n    /// @return The price of a junior token in pool tokens\\n    function getEpochJuniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = juniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return epochJuniorLiquidity * scaleFactor / supply;\\n    }\\n\\n    /// @notice Return the price of the senior token for the current epoch\\n    /// @dev If there's no supply, it returns 1 (scaled by scaleFactor).\\n    /// @dev It does not take into account the current profits and losses.\\n    /// @return The price of a senior token in pool tokens\\n    function getEpochSeniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = seniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return epochSeniorLiquidity * scaleFactor / supply;\\n    }\\n\\n    /// @notice Return the senior liquidity taking into account the current, unrealized, profits and losses\\n    /// @return The estimated senior liquidity\\n    function estimateCurrentSeniorLiquidity() public view returns (uint256) {\\n        uint256 seniorProfits = getCurrentSeniorProfits();\\n        if (seniorProfits > 0) {\\n            uint256 fee = seniorProfits * feesPercentage / scaleFactor;\\n            seniorProfits -= fee;\\n        }\\n\\n        uint256 juniorProfits = getCurrentJuniorProfits();\\n\\n        return epochSeniorLiquidity + seniorProfits - juniorProfits;\\n    }\\n\\n    /// @notice Return the junior liquidity taking into account the current, unrealized, profits and losses\\n    /// @return The estimated junior liquidity\\n    function estimateCurrentJuniorLiquidity() public view returns (uint256) {\\n        uint256 seniorProfits = getCurrentSeniorProfits();\\n\\n        uint256 juniorProfits = getCurrentJuniorProfits();\\n        if (juniorProfits > 0) {\\n            uint256 fee = juniorProfits * feesPercentage / scaleFactor;\\n            juniorProfits -= fee;\\n        }\\n\\n        return epochJuniorLiquidity - seniorProfits + juniorProfits;\\n    }\\n\\n    /// @notice Return the current senior token price taking into account the current, unrealized, profits and losses\\n    /// @return The estimated senior token price\\n    function estimateCurrentSeniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = seniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return estimateCurrentSeniorLiquidity() * scaleFactor / supply;\\n    }\\n\\n    /// @notice Return the current junior token price taking into account the current, unrealized, profits and losses\\n    /// @return The estimated junior token price\\n    function estimateCurrentJuniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = juniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return estimateCurrentJuniorLiquidity() * scaleFactor / supply;\\n    }\\n\\n    /// @notice Process the junior entry and exit queues\\n    /// @dev It saves the junior token price valid for the stored epoch to storage for further reference.\\n    /// @dev It optimizes gas usage by re-using some of the tokens it already has minted which leads to only one of the {mint, burn} actions to be executed.\\n    /// @dev All queued positions will be converted into junior tokens or underlying at the same price.\\n    /// @return The amount of underlying (pool tokens) that should be set aside\\n    function _processJuniorQueues() internal returns (uint256){\\n        uint256 juniorTokenPrice = getEpochJuniorTokenPrice();\\n        history_epochJuniorTokenPrice[epoch] = juniorTokenPrice;\\n\\n        uint256 juniorTokensToMint = queuedJuniorsUnderlyingIn * scaleFactor / juniorTokenPrice;\\n        uint256 juniorTokensToBurn = queuedJuniorTokensBurn;\\n\\n        uint256 juniorUnderlyingOut = juniorTokensToBurn * juniorTokenPrice / scaleFactor;\\n\\n        if (juniorTokensToMint > juniorTokensToBurn) {\\n            uint256 diff = juniorTokensToMint - juniorTokensToBurn;\\n            juniorToken.mint(address(this), diff);\\n        } else if (juniorTokensToBurn > juniorTokensToMint) {\\n            uint256 diff = juniorTokensToBurn - juniorTokensToMint;\\n            juniorToken.burn(address(this), diff);\\n        } else {\\n            // nothing to mint or burn\\n        }\\n\\n        return juniorUnderlyingOut;\\n    }\\n\\n    /// @notice Process the senior entry and exit queues\\n    /// @dev It saves the senior token price valid for the stored epoch to storage for further reference.\\n    /// @dev It optimizes gas usage by re-using some of the tokens it already has minted which leads to only one of the {mint, burn} actions to be executed.\\n    /// @dev All queued positions will be converted into senior tokens or underlying at the same price.\\n    /// @return The amount of underlying (pool tokens) that should be set aside\\n    function _processSeniorQueues() internal returns (uint256) {\\n        uint256 seniorTokenPrice = getEpochSeniorTokenPrice();\\n        history_epochSeniorTokenPrice[epoch] = seniorTokenPrice;\\n\\n        uint256 seniorTokensToMint = queuedSeniorsUnderlyingIn * scaleFactor / seniorTokenPrice;\\n        uint256 seniorTokensToBurn = queuedSeniorTokensBurn;\\n\\n        uint256 seniorUnderlyingOut = seniorTokensToBurn * seniorTokenPrice / scaleFactor;\\n\\n        if (seniorTokensToMint > seniorTokensToBurn) {\\n            uint256 diff = seniorTokensToMint - seniorTokensToBurn;\\n            seniorToken.mint(address(this), diff);\\n        } else if (seniorTokensToBurn > seniorTokensToMint) {\\n            uint256 diff = seniorTokensToBurn - seniorTokensToMint;\\n            seniorToken.burn(address(this), diff);\\n        } else {\\n            // nothing to mint or burn\\n        }\\n\\n        return seniorUnderlyingOut;\\n    }\\n}\\n\",\"keccak256\":\"0x827690cdadd9727fad027a33bdf41dc91b8f77f386abfc9588d7231554e7ffd7\",\"license\":\"Apache-2.0\"},\"contracts/SmartAlphaEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nabstract contract SmartAlphaEvents {\\n    /// @notice Logs a deposit of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param underlyingIn The amount of underlying deposited\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event JuniorJoinEntryQueue(address indexed user, uint256 epochId, uint256 underlyingIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs a redeem (2nd step of deposit) of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param tokensOut The amount of junior tokens redeemed\\n    event JuniorRedeemTokens(address indexed user, uint256 epochId, uint256 tokensOut);\\n\\n    /// @notice Logs an exit (1st step) of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param tokensIn The amount of junior tokens deposited into the queue\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event JuniorJoinExitQueue(address indexed user, uint256 epochId, uint256 tokensIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs an exit (2nd step) of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param underlyingOut The amount of underlying transferred to the user\\n    event JuniorRedeemUnderlying(address indexed user, uint256 epochId, uint256 underlyingOut);\\n\\n    /// @notice Logs a deposit of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param underlyingIn The amount of underlying deposited\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event SeniorJoinEntryQueue(address indexed user, uint256 epochId, uint256 underlyingIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs a redeem (2nd step of deposit) of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param tokensOut The amount of senior tokens redeemed\\n    event SeniorRedeemTokens(address indexed user, uint256 epochId, uint256 tokensOut);\\n\\n    /// @notice Logs an exit (1st step) of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param tokensIn The amount of senior tokens deposited into the queue\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event SeniorJoinExitQueue(address indexed user, uint256 epochId, uint256 tokensIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs an exit (2nd step) of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param underlyingOut The amount of underlying transferred to the user\\n    event SeniorRedeemUnderlying(address indexed user, uint256 epochId, uint256 underlyingOut);\\n\\n    /// @notice Logs an epoch end\\n    /// @param epochId The id of the epoch that just ended\\n    /// @param juniorProfits The amount of junior profits for the epoch that ended in underlying tokens\\n    /// @param seniorProfits The amount of senior profits for the epoch that ended in underlying tokens\\n    event EpochEnd(uint256 epochId, uint256 juniorProfits, uint256 seniorProfits);\\n\\n    /// @notice Logs a transfer of fees\\n    /// @param caller The caller of the function\\n    /// @param destination The destination address of the funds\\n    /// @param amount The amount of tokens that were transferred\\n    event FeesTransfer(address caller, address destination, uint256 amount);\\n\\n    /// @notice Logs a transfer of dao power to a new address\\n    /// @param oldDAO The address of the old DAO\\n    /// @param newDAO The address of the new DAO\\n    event TransferDAO(address oldDAO, address newDAO);\\n\\n    /// @notice Logs a transfer of Guardian power to a new address\\n    /// @param oldGuardian The address of the old guardian\\n    /// @param newGuardian The address of the new guardian\\n    event TransferGuardian(address oldGuardian, address newGuardian);\\n\\n    /// @notice Logs a system pause\\n    event PauseSystem();\\n\\n    /// @notice logs a system resume\\n    event ResumeSystem();\\n\\n    /// @notice logs a change of price oracle\\n    /// @param oldOracle Address of the old oracle\\n    /// @param newOracle Address of the new oracle\\n    event SetPriceOracle(address oldOracle, address newOracle);\\n\\n    /// @notice Logs a change of senior rate model contract\\n    /// @param oldModel Address of the old model\\n    /// @param newModel Address of the new model\\n    event SetSeniorRateModel(address oldModel, address newModel);\\n\\n    /// @notice Logs a change of accounting model contract\\n    /// @param oldModel Address of the old model\\n    /// @param newModel Address of the new model\\n    event SetAccountingModel(address oldModel, address newModel);\\n\\n    /// @notice Logs a change of fees owner\\n    /// @param oldOwner Address of the old owner of fees\\n    /// @param newOwner Address of the new owner of fees\\n    event SetFeesOwner(address oldOwner, address newOwner);\\n\\n    /// @notice Logs a change of fees percentage\\n    /// @param oldPercentage The old percentage of fees\\n    /// @param newPercentage The new percentage of fees\\n    event SetFeesPercentage(uint256 oldPercentage, uint256 newPercentage);\\n}\\n\",\"keccak256\":\"0xf221f5125de022d6e042f31a3cb5cfc61f221b2c96abbbfbef51f39c48f46a6e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IAccountingModel.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface IAccountingModel {\\n    function calcJuniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 upsideExposureRate,\\n        uint256 totalSeniors,\\n        uint256 totalBalance\\n    ) external pure returns (uint256);\\n\\n    function calcSeniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 downsideProtectionRate,\\n        uint256 totalSeniors,\\n        uint256 totalBalance\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x464f2c1f6a2f60a144cbd6da1d15859794c972897f7b3b1d9da856fd0ab27358\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface IPriceOracle {\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3851c607e3979781522c3879056027850e63b319f5e5dd862cb88ec0d0fdce70\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISeniorRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface ISeniorRateModel {\\n    function getRates(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256, uint256);\\n    function getUpsideExposureRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256);\\n    function getDownsideProtectionRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5de0ad8fe825db0fb964764f5095c2ff60fe29c5c8cd7c070e1326d7c05966e5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003264380380620032648339810160408190526200003491620000e3565b81816001600160a01b038216620000685760405162461bcd60e51b81526004016200005f906200011b565b60405180910390fd5b6001600160a01b038116620000915760405162461bcd60e51b81526004016200005f906200011b565b600080546001600160a01b039384166001600160a01b0319918216179091556001805492909316911617905550620001449050565b80516001600160a01b0381168114620000de57600080fd5b919050565b60008060408385031215620000f757600080fd5b6200010283620000c6565b91506200011260208401620000c6565b90509250929050565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b61311080620001546000396000f3fe608060405234801561001057600080fd5b50600436106102f65760003560e01c806301655bb2146102fb578063055ff2721461032e578063077e620b1461033757806307886ac614610341578063091954cd1461034a5780630aeb0d451461035d578063157c51d314610365578063158ef93e1461036d578063194f92611461038a5780631a48c5d2146103925780631ff05aa21461039a578063213ecbba146103ba5780632229f817146103c35780632630c12f146103cc5780633310ae3b146103df5780633cf80e6c146103f25780633dadcd0e146103fa5780634162169f1461040357806341a513c21461041657806343f6949e1461044b578063452a9320146104725780634e43773e146104855780634ff0876a1461049857806351992eed146104a1578063530e784f146104b4578063555f9f0c146104c757806355e1423c146104d05780635b8382f5146104d95780635c975abb146104e15780635d7f81a7146104f55780635de53e791461051c57806365b563321461052557806366eb06fa1461052d578063683dd19114610536578063759be806146105455780637a318866146105585780637ab01705146105365780637e62fc151461056b578063812b06d014610573578063812bbab2146105935780638d97f3cb1461059b578063900cf0cf146105ae57806390db9ab5146105b757806394db0595146105bf5780639ac3d81c146105c7578063a8f3c340146105d0578063adaa8a6c146105d9578063b0e97872146105e2578063b9161287146105f5578063b97dd9e21461061c578063bbcf929914610624578063c2fbe7bc14610637578063c740671f1461063f578063c87f636214610652578063c9cb140514610665578063cb9d6b0d14610678578063cbdf382c14610680578063cfca2fb414610698578063d6ce5458146106a0578063dc1d4fb7146106a8578063de335be4146106b0578063e216ad1c146106c3578063e81619ac146106d6578063f0eff645146106de578063f4a4341d146106f1578063fc6e9cd9146106fa575b600080fd5b61031b610309366004612d66565b60186020526000908152604090205481565b6040519081526020015b60405180910390f35b61031b600f5481565b61033f610702565b005b61031b60145481565b61033f610358366004612c75565b610864565b61031b610929565b61033f6109f4565b60075461037a9060ff1681565b6040519015158152602001610325565b61033f610a77565b61033f610bc2565b6004546103ad906001600160a01b031681565b6040516103259190612dd8565b61031b60065481565b61031b60175481565b6002546103ad906001600160a01b031681565b61033f6103ed366004612d66565b610cbc565b61033f610ea0565b61031b60155481565b6000546103ad906001600160a01b031681565b61043d610424366004612c75565b601a602052600090815260409020805460019091015482565b604051610325929190612fec565b61043d610459366004612c75565b601d602052600090815260409020805460019091015482565b6001546103ad906001600160a01b031681565b61033f610493366004612d66565b61117d565b61031b600b5481565b6003546103ad906001600160a01b031681565b61033f6104c2366004612c75565b611331565b61031b600d5481565b61031b600e5481565b61031b6113d3565b60015461037a90600160a01b900460ff1681565b61043d610503366004612c75565b601c602052600090815260409020805460019091015482565b61031b60135481565b61031b611484565b61031b60125481565b61031b670de0b6b3a764000081565b61033f610553366004612c75565b6115c1565b61033f610566366004612c75565b611658565b61031b61171d565b61031b610581366004612d66565b60196020526000908152604090205481565b61033f6117d3565b61033f6105a9366004612d66565b6118cd565b61031b600c5481565b61031b611a74565b61031b611ae6565b61031b60105481565b61031b60115481565b61031b60165481565b6008546103ad906001600160a01b031681565b61043d610603366004612c75565b601b602052600090815260409020805460019091015482565b61031b611b95565b61033f610632366004612c75565b611bcc565b61033f611c6e565b61033f61064d366004612caf565b611d48565b61033f610660366004612c75565b6120b7565b61033f610673366004612d66565b612159565b61031b612221565b6007546103ad9061010090046001600160a01b031681565b61031b61224d565b61031b6122b8565b61033f6122ca565b61033f6106be366004612d66565b61233a565b6009546103ad906001600160a01b031681565b61031b61251e565b6005546103ad906001600160a01b031681565b61031b600a5481565b61031b6125d2565b61070a610ea0565b336000908152601c60205260409020600c548154106107445760405162461bcd60e51b815260040161073b90612fa0565b60405180910390fd5b6001810154806107665760405162461bcd60e51b815260040161073b90612e76565b60006001830181905582548152601960205260408120549081610791670de0b6b3a76400008561304a565b61079b9190613028565b60095460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906107ce9033908590600401612e2a565b602060405180830381600087803b1580156107e857600080fd5b505af11580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190612d44565b50835460405133917f8b9d5ffabdef5875b86c23ad0939273948c7611ebc419a3c23c8f8532cbe20c89161085691908590612fec565b60405180910390a250505050565b61086c612688565b6001600160a01b0381166108925760405162461bcd60e51b815260040161073b90612f49565b6001546001600160a01b03828116911614156108c05760405162461bcd60e51b815260040161073b90612ea1565b6001546040517f19e3cbfd9b25c12fb88132e5887dc3a2a4f52979bd0af17f78e6fea817addf4b916108ff916001600160a01b03909116908490612dec565b60405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561097a57600080fd5b505afa15801561098e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b29190612d7f565b9050806109c857670de0b6b3a764000091505090565b80670de0b6b3a76400006109da611a74565b6109e4919061304a565b6109ee9190613028565b91505090565b6109fc612688565b600154600160a01b900460ff16610a3f5760405162461bcd60e51b8152602060048201526007602482015266085c185d5cd95960ca1b604482015260640161073b565b6001805460ff60a01b191690556040517f3008289779e367cc52c347e8bb0a995361494ac17d2ccb8b09a75a77f8c58b9490600090a1565b610a7f610ea0565b336000908152601a60205260409020600c54815410610ab05760405162461bcd60e51b815260040161073b90612fa0565b600181015480610ad25760405162461bcd60e51b815260040161073b90612e76565b60006001830181905582548152601860205260408120549081610afd670de0b6b3a76400008561304a565b610b079190613028565b60085460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610b3a9033908590600401612e2a565b602060405180830381600087803b158015610b5457600080fd5b505af1158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c9190612d44565b50835460405133917f822bdec5f81295b087914a2de8160ebad0523c35c96ab4ab599564d86c588ced9161085691908590612fec565b610bca610ea0565b336000908152601b60205260409020600c54815410610bfb5760405162461bcd60e51b815260040161073b90612fa0565b600181015480610c1d5760405162461bcd60e51b815260040161073b90612e76565b600060018301819055825481526018602052604081205490670de0b6b3a7640000610c48838561304a565b610c529190613028565b90508060136000828254610c669190613069565b9091555050600754610c879061010090046001600160a01b031633836126e5565b835460405133917fa362bf831ec0975732381d8a2218cc84161953de04be755d93f9474860f432ee9161085691908590612fec565b610cc4610ea0565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610cf5903390600401612dd8565b60206040518083038186803b158015610d0d57600080fd5b505afa158015610d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d459190612d7f565b905081811015610d675760405162461bcd60e51b815260040161073b90612ee6565b8160146000828254610d799190613010565b9091555050336000908152601b60205260409020600181015415801590610da25750600c548154105b15610daf57610daf610bc2565b600c5481541015610dc057600c5481555b6000838260010154610dd29190613010565b6001830181905560085460405163a0f0bf7f60e01b81529192506001600160a01b03169063a0f0bf7f90610e0e90339030908990600401612e06565b602060405180830381600087803b158015610e2857600080fd5b505af1158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e609190612d44565b50336001600160a01b03167fd634a1ad9b45b7e951a1f30528c0209e937d46d164fd43268090f427349205a3600c54868460405161085693929190612ffa565b6000610eaa611b95565b905080600c5410610eb85750565b6000610ec2611484565b90506000610ece61251e565b90508115610f2c576000670de0b6b3a764000060065484610eef919061304a565b610ef99190613028565b905082600e54610f099190613069565b600e55610f168184613069565b600d54610f239190613010565b600d5550610f84565b8015610f84576000670de0b6b3a764000060065483610f4b919061304a565b610f559190613028565b905081600d54610f659190613069565b600d55610f728183613069565b600e54610f7f9190613010565b600e55505b7faed63947ee74099c60670bac488f65fecd95864d94817d4300ee62fa63afe188600c548284604051610fb993929190612ffa565b60405180910390a1600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561100f57600080fd5b505afa158015611023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110479190612d7f565b6011556000611054612740565b9050600061106061287a565b905060155481600d546110739190613069565b61107d9190613010565b600d8190555080601660008282546110959190613010565b90915550506000601555601254600e546110b0908490613069565b6110ba9190613010565b600e8190555081601360008282546110d29190613010565b9091555050600060128190556014819055601755600354600e54600d546040516345b05a4360e01b81526001600160a01b03909316926345b05a439261111c929091600401612fec565b604080518083038186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b9190612d98565b601055600f55505050600c9190915550565b611185612974565b61118d610ea0565b600081116111ad5760405162461bcd60e51b815260040161073b90612f12565b600754604051636eb1769f60e11b8152829161010090046001600160a01b03169063dd62ed3e906111e49033903090600401612dec565b60206040518083038186803b1580156111fc57600080fd5b505afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190612d7f565b10156112525760405162461bcd60e51b815260040161073b90612f72565b336000908152601c602052604090206001810154158015906112765750600c548154105b1561128357611283610702565b600c548154101561129457600c5481555b81601560008282546112a69190613010565b909155505060018101546000906112be908490613010565b600183018190556007549091506112e59061010090046001600160a01b031633308661299e565b336001600160a01b03167fae031a79e52a4da207e03aac3a3217f2cff9d56d24642655fbf7844a07f0f36a600c54858460405161132493929190612ffa565b60405180910390a2505050565b6113396129c5565b61136a816040518060400160405280600f81526020016e696e76616c6964206164647265737360881b815250612a08565b6002546040517f944f260fa5475db9151efe54fc9fb6df2b40f73533d9483011e94522398cb3c1916113a9916001600160a01b03909116908490612dec565b60405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142457600080fd5b505afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c9190612d7f565b90508061147257670de0b6b3a764000091505090565b80670de0b6b3a76400006109da61224d565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114d557600080fd5b505afa1580156114e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150d9190612d7f565b600454601154601054600d549394506001600160a01b039092169263aeec2edd9285916115386122b8565b6040516001600160e01b031960e088901b1681526004810195909552602485019390935260448401919091526064830152608482015260a40160206040518083038186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee9190612d7f565b6115c96129c5565b6001600160a01b0381166115ef5760405162461bcd60e51b815260040161073b90612f49565b6005546040517f461364f084b7657c2380660ebd35dd6c4560dc78cc6e9795919e53b4e257de839161162e916001600160a01b03909116908490612dec565b60405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b6116606129c5565b6001600160a01b0381166116865760405162461bcd60e51b815260040161073b90612f49565b6000546001600160a01b03828116911614156116b45760405162461bcd60e51b815260040161073b90612ea1565b6000546040517fe010a6a96c097bdc495fe0aa7b1c1343e8528bd70556da39cd47b0130555c190916116f3916001600160a01b03909116908490612dec565b60405180910390a1600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176e57600080fd5b505afa158015611782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a69190612d7f565b9050806117bc57670de0b6b3a764000091505090565b80670de0b6b3a7640000600e546109e4919061304a565b6117db610ea0565b336000908152601d60205260409020600c5481541061180c5760405162461bcd60e51b815260040161073b90612fa0565b60018101548061182e5760405162461bcd60e51b815260040161073b90612e76565b600060018301819055825481526019602052604081205490670de0b6b3a7640000611859838561304a565b6118639190613028565b905080601660008282546118779190613069565b90915550506007546118989061010090046001600160a01b031633836126e5565b835460405133917f014d40541bf53e076bad44aa8bfef33f82c777c0f04196e5582587bad9ee5b369161085691908590612fec565b6118d5612974565b6118dd610ea0565b600081116118fd5760405162461bcd60e51b815260040161073b90612f12565b600754604051636eb1769f60e11b8152829161010090046001600160a01b03169063dd62ed3e906119349033903090600401612dec565b60206040518083038186803b15801561194c57600080fd5b505afa158015611960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119849190612d7f565b10156119a25760405162461bcd60e51b815260040161073b90612f72565b336000908152601a602052604090206001810154158015906119c65750600c548154105b156119d3576119d3610a77565b600c54815410156119e457600c5481555b81601260008282546119f69190613010565b90915550506001810154600090611a0e908490613010565b60018301819055600754909150611a359061010090046001600160a01b031633308661299e565b336001600160a01b03167f81b0ac0867278845eee541a0351e48acc52b65ba1a469e840ad5a4f8a8650a2e600c54858460405161132493929190612ffa565b600080611a7f611484565b90508015611aba576000670de0b6b3a764000060065483611aa0919061304a565b611aaa9190613028565b9050611ab68183613069565b9150505b6000611ac461251e565b90508082600d54611ad59190613010565b611adf9190613069565b9250505090565b6000611af0612221565b611af86122b8565b6007546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190611b2c903090600401612dd8565b60206040518083038186803b158015611b4457600080fd5b505afa158015611b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7c9190612d7f565b611b869190613069565b611b909190613069565b905090565b6000600a54421015611ba75750600090565b600b54600a54611bb79042613069565b611bc19190613028565b611b90906001613010565b611bd46129c5565b611c05816040518060400160405280600f81526020016e696e76616c6964206164647265737360881b815250612a08565b6003546040517ffbbe86207337f27b9ba95decb76b63122f31b20555b8b3737055683611443aac91611c44916001600160a01b03909116908490612dec565b60405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000611c78611ae6565b905060008111611cb45760405162461bcd60e51b81526020600482015260076024820152666e6f206665657360c81b604482015260640161073b565b6005546001600160a01b0316611cdc5760405162461bcd60e51b815260040161073b90612ebf565b600554600754611cfe916001600160a01b0361010090920482169116836126e5565b6005546040517f6d86532cebce232743f74710d18164bfb38cbebf1ca203cb83382b9cf54cd9ac91611d3d9133916001600160a01b0316908590612e06565b60405180910390a150565b60075460ff1615611d9a5760405162461bcd60e51b815260206004820152601c60248201527b18dbdb9d1c9858dd08185b1c9958591e481a5b9a5d1a585b1a5e995960221b604482015260640161073b565b6007805460ff19166001179055611daf6129c5565b611db887611331565b611dc186611bcc565b611dca856120b7565b6001600160a01b038816611e1a5760405162461bcd60e51b81526020600482015260176024820152760706f6f6c20746f6b656e2063616e27742062652030783604c1b604482015260640161073b565b6001600160a01b038416611e6c5760405162461bcd60e51b815260206004820152601960248201527806a756e696f7220746f6b656e2063616e27742062652030783603c1b604482015260640161073b565b6001600160a01b038316611ebe5760405162461bcd60e51b8152602060048201526019602482015278073656e696f7220746f6b656e2063616e27742062652030783603c1b604482015260640161073b565b600780546001600160a01b03808b1661010002610100600160a81b031990921691909117909155600880549186166001600160a01b03199092168217905560408051638da5cb5b60e01b81529051309291638da5cb5b916004808301926020929190829003018186803b158015611f3457600080fd5b505afa158015611f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6c9190612c92565b6001600160a01b031614611fc25760405162461bcd60e51b815260206004820152601d60248201527f6a756e696f7220746f6b656e206f776e6572206d757374206265205341000000604482015260640161073b565b600980546001600160a01b0319166001600160a01b03851690811790915560408051638da5cb5b60e01b81529051309291638da5cb5b916004808301926020929190829003018186803b15801561201857600080fd5b505afa15801561202c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120509190612c92565b6001600160a01b0316146120a65760405162461bcd60e51b815260206004820152601d60248201527f73656e696f7220746f6b656e206f776e6572206d757374206265205341000000604482015260640161073b565b600a91909155600b55505050505050565b6120bf6129c5565b6120f0816040518060400160405280600f81526020016e696e76616c6964206164647265737360881b815250612a08565b6004546040517ffd041dbbf45fb8b18dc79ae79199a37ddc52c7559ac44fdd5fefb9aa9c2028439161212f916001600160a01b03909116908490612dec565b60405180910390a1600480546001600160a01b0319166001600160a01b0392909216919091179055565b6121616129c5565b801561218f576005546001600160a01b031661218f5760405162461bcd60e51b815260040161073b90612ebf565b670de0b6b3a76400008111156121e15760405162461bcd60e51b81526020600482015260176024820152761b585e081c195c98d95b9d1859d948195e18d959591959604a1b604482015260640161073b565b7fe5bd021bb3e7a336d89185c09eb4286717c23a651140650eeda4d774812cde1260065482604051612214929190612fec565b60405180910390a1600655565b60006016546013546015546012546122399190613010565b6122439190613010565b611b909190613010565b600080612258611484565b9050600061226461251e565b9050801561229f576000670de0b6b3a764000060065483612285919061304a565b61228f9190613028565b905061229b8183613069565b9150505b8082600e546122ae9190613069565b611adf9190613010565b6000600d54600e54611b909190613010565b6122d2612688565b600154600160a01b900460ff16156122fc5760405162461bcd60e51b815260040161073b90612fcc565b6001805460ff60a01b1916600160a01b1790556040517fee68d332edc397b95695f3d00eb879007ec02eb6733fe32e305cc12d406d03c190600090a1565b612342610ea0565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612373903390600401612dd8565b60206040518083038186803b15801561238b57600080fd5b505afa15801561239f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c39190612d7f565b9050818110156123e55760405162461bcd60e51b815260040161073b90612ee6565b81601760008282546123f79190613010565b9091555050336000908152601d602052604090206001810154158015906124205750600c548154105b1561242d5761242d6117d3565b600c548154101561243e57600c5481555b60008382600101546124509190613010565b6001830181905560095460405163a0f0bf7f60e01b81529192506001600160a01b03169063a0f0bf7f9061248c90339030908990600401612e06565b602060405180830381600087803b1580156124a657600080fd5b505af11580156124ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124de9190612d44565b50336001600160a01b03167f8fe0fbd18893ea6a3597f5ccec3e4494f92cc4cea7276a9a868c6a9bd1504e61600c54868460405161085693929190612ffa565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561256f57600080fd5b505afa158015612583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a79190612d7f565b600454601154600f54600d549394506001600160a01b039092169263cd91b1899285916115386122b8565b600080600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561262357600080fd5b505afa158015612637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265b9190612d7f565b90508061267157670de0b6b3a764000091505090565b80670de0b6b3a7640000600d546109e4919061304a565b6001546001600160a01b03163314806126ab57506000546001600160a01b031633145b6126e35760405162461bcd60e51b815260206004820152600960248201526810b3bab0b93234b0b760b91b604482015260640161073b565b565b61273b8363a9059cbb60e01b8484604051602401612704929190612e2a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a29565b505050565b60008061274b61171d565b600c54600090815260186020526040812082905560125491925090829061277b90670de0b6b3a76400009061304a565b6127859190613028565b6014549091506000670de0b6b3a76400006127a0858461304a565b6127aa9190613028565b90508183111561282b5760006127c08385613069565b6008546040516340c10f1960e01b81529192506001600160a01b0316906340c10f19906127f39030908590600401612e2a565b600060405180830381600087803b15801561280d57600080fd5b505af1158015612821573d6000803e3d6000fd5b5050505050612872565b8282111561287257600061283f8484613069565b600854604051632770a7eb60e21b81529192506001600160a01b031690639dc29fac906127f39030908590600401612e2a565b949350505050565b6000806128856125d2565b600c5460009081526019602052604081208290556015549192509082906128b590670de0b6b3a76400009061304a565b6128bf9190613028565b6017549091506000670de0b6b3a76400006128da858461304a565b6128e49190613028565b90508183111561292d5760006128fa8385613069565b6009546040516340c10f1960e01b81529192506001600160a01b0316906340c10f19906127f39030908590600401612e2a565b828211156128725760006129418484613069565b600954604051632770a7eb60e21b81529192506001600160a01b031690639dc29fac906127f39030908590600401612e2a565b600154600160a01b900460ff16156126e35760405162461bcd60e51b815260040161073b90612fcc565b6129bf846323b872dd60e01b85858560405160240161270493929190612e06565b50505050565b6000546001600160a01b031633146126e35760405162461bcd60e51b815260040161073b906020808252600490820152632164616f60e01b604082015260600190565b813b81816129bf5760405162461bcd60e51b815260040161073b9190612e43565b6000612a7e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612afb9092919063ffffffff16565b80519091501561273b5780806020019051810190612a9c9190612d44565b61273b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161073b565b6060612b0a8484600085612b14565b90505b9392505050565b606082471015612b755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161073b565b843b612bc35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161073b565b600080866001600160a01b03168587604051612bdf9190612dbc565b60006040518083038185875af1925050503d8060008114612c1c576040519150601f19603f3d011682016040523d82523d6000602084013e612c21565b606091505b5091509150612c31828286612c3c565b979650505050505050565b60608315612c4b575081612b0d565b825115612c5b5782518084602001fd5b8160405162461bcd60e51b815260040161073b9190612e43565b600060208284031215612c8757600080fd5b8135612b0d816130c2565b600060208284031215612ca457600080fd5b8151612b0d816130c2565b600080600080600080600080610100898b031215612ccc57600080fd5b8835612cd7816130c2565b97506020890135612ce7816130c2565b96506040890135612cf7816130c2565b95506060890135612d07816130c2565b94506080890135612d17816130c2565b935060a0890135612d27816130c2565b979a969950949793969295929450505060c08201359160e0013590565b600060208284031215612d5657600080fd5b81518015158114612b0d57600080fd5b600060208284031215612d7857600080fd5b5035919050565b600060208284031215612d9157600080fd5b5051919050565b60008060408385031215612dab57600080fd5b505080516020909101519092909150565b60008251612dce818460208701613080565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152612e62816040850160208701613080565b601f01601f19169190910160400192915050565b6020808252601190820152706e6f7468696e6720746f2072656465656d60781b604082015260600190565b602080825260049082015263216e657760e01b604082015260600190565b6020808252600d908201526c3737903332b2b99037bbb732b960991b604082015260600190565b6020808252601290820152716e6f7420656e6f7567682062616c616e636560701b604082015260600190565b6020808252601d908201527f616d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b6020808252601490820152736e6f7420656e6f75676820616c6c6f77616e636560601b604082015260600190565b6020808252601290820152711b9bdd081c995919595b58589b19481e595d60721b604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60008219821115613023576130236130ac565b500190565b60008261304557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613064576130646130ac565b500290565b60008282101561307b5761307b6130ac565b500390565b60005b8381101561309b578181015183820152602001613083565b838111156129bf5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146130d757600080fd5b5056fea26469706673582212208e1bc10bc2e6b23d55ab9baefa4caa6c44eb9a3627faac83c544d72931f0391064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f65760003560e01c806301655bb2146102fb578063055ff2721461032e578063077e620b1461033757806307886ac614610341578063091954cd1461034a5780630aeb0d451461035d578063157c51d314610365578063158ef93e1461036d578063194f92611461038a5780631a48c5d2146103925780631ff05aa21461039a578063213ecbba146103ba5780632229f817146103c35780632630c12f146103cc5780633310ae3b146103df5780633cf80e6c146103f25780633dadcd0e146103fa5780634162169f1461040357806341a513c21461041657806343f6949e1461044b578063452a9320146104725780634e43773e146104855780634ff0876a1461049857806351992eed146104a1578063530e784f146104b4578063555f9f0c146104c757806355e1423c146104d05780635b8382f5146104d95780635c975abb146104e15780635d7f81a7146104f55780635de53e791461051c57806365b563321461052557806366eb06fa1461052d578063683dd19114610536578063759be806146105455780637a318866146105585780637ab01705146105365780637e62fc151461056b578063812b06d014610573578063812bbab2146105935780638d97f3cb1461059b578063900cf0cf146105ae57806390db9ab5146105b757806394db0595146105bf5780639ac3d81c146105c7578063a8f3c340146105d0578063adaa8a6c146105d9578063b0e97872146105e2578063b9161287146105f5578063b97dd9e21461061c578063bbcf929914610624578063c2fbe7bc14610637578063c740671f1461063f578063c87f636214610652578063c9cb140514610665578063cb9d6b0d14610678578063cbdf382c14610680578063cfca2fb414610698578063d6ce5458146106a0578063dc1d4fb7146106a8578063de335be4146106b0578063e216ad1c146106c3578063e81619ac146106d6578063f0eff645146106de578063f4a4341d146106f1578063fc6e9cd9146106fa575b600080fd5b61031b610309366004612d66565b60186020526000908152604090205481565b6040519081526020015b60405180910390f35b61031b600f5481565b61033f610702565b005b61031b60145481565b61033f610358366004612c75565b610864565b61031b610929565b61033f6109f4565b60075461037a9060ff1681565b6040519015158152602001610325565b61033f610a77565b61033f610bc2565b6004546103ad906001600160a01b031681565b6040516103259190612dd8565b61031b60065481565b61031b60175481565b6002546103ad906001600160a01b031681565b61033f6103ed366004612d66565b610cbc565b61033f610ea0565b61031b60155481565b6000546103ad906001600160a01b031681565b61043d610424366004612c75565b601a602052600090815260409020805460019091015482565b604051610325929190612fec565b61043d610459366004612c75565b601d602052600090815260409020805460019091015482565b6001546103ad906001600160a01b031681565b61033f610493366004612d66565b61117d565b61031b600b5481565b6003546103ad906001600160a01b031681565b61033f6104c2366004612c75565b611331565b61031b600d5481565b61031b600e5481565b61031b6113d3565b60015461037a90600160a01b900460ff1681565b61043d610503366004612c75565b601c602052600090815260409020805460019091015482565b61031b60135481565b61031b611484565b61031b60125481565b61031b670de0b6b3a764000081565b61033f610553366004612c75565b6115c1565b61033f610566366004612c75565b611658565b61031b61171d565b61031b610581366004612d66565b60196020526000908152604090205481565b61033f6117d3565b61033f6105a9366004612d66565b6118cd565b61031b600c5481565b61031b611a74565b61031b611ae6565b61031b60105481565b61031b60115481565b61031b60165481565b6008546103ad906001600160a01b031681565b61043d610603366004612c75565b601b602052600090815260409020805460019091015482565b61031b611b95565b61033f610632366004612c75565b611bcc565b61033f611c6e565b61033f61064d366004612caf565b611d48565b61033f610660366004612c75565b6120b7565b61033f610673366004612d66565b612159565b61031b612221565b6007546103ad9061010090046001600160a01b031681565b61031b61224d565b61031b6122b8565b61033f6122ca565b61033f6106be366004612d66565b61233a565b6009546103ad906001600160a01b031681565b61031b61251e565b6005546103ad906001600160a01b031681565b61031b600a5481565b61031b6125d2565b61070a610ea0565b336000908152601c60205260409020600c548154106107445760405162461bcd60e51b815260040161073b90612fa0565b60405180910390fd5b6001810154806107665760405162461bcd60e51b815260040161073b90612e76565b60006001830181905582548152601960205260408120549081610791670de0b6b3a76400008561304a565b61079b9190613028565b60095460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906107ce9033908590600401612e2a565b602060405180830381600087803b1580156107e857600080fd5b505af11580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190612d44565b50835460405133917f8b9d5ffabdef5875b86c23ad0939273948c7611ebc419a3c23c8f8532cbe20c89161085691908590612fec565b60405180910390a250505050565b61086c612688565b6001600160a01b0381166108925760405162461bcd60e51b815260040161073b90612f49565b6001546001600160a01b03828116911614156108c05760405162461bcd60e51b815260040161073b90612ea1565b6001546040517f19e3cbfd9b25c12fb88132e5887dc3a2a4f52979bd0af17f78e6fea817addf4b916108ff916001600160a01b03909116908490612dec565b60405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561097a57600080fd5b505afa15801561098e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b29190612d7f565b9050806109c857670de0b6b3a764000091505090565b80670de0b6b3a76400006109da611a74565b6109e4919061304a565b6109ee9190613028565b91505090565b6109fc612688565b600154600160a01b900460ff16610a3f5760405162461bcd60e51b8152602060048201526007602482015266085c185d5cd95960ca1b604482015260640161073b565b6001805460ff60a01b191690556040517f3008289779e367cc52c347e8bb0a995361494ac17d2ccb8b09a75a77f8c58b9490600090a1565b610a7f610ea0565b336000908152601a60205260409020600c54815410610ab05760405162461bcd60e51b815260040161073b90612fa0565b600181015480610ad25760405162461bcd60e51b815260040161073b90612e76565b60006001830181905582548152601860205260408120549081610afd670de0b6b3a76400008561304a565b610b079190613028565b60085460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610b3a9033908590600401612e2a565b602060405180830381600087803b158015610b5457600080fd5b505af1158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c9190612d44565b50835460405133917f822bdec5f81295b087914a2de8160ebad0523c35c96ab4ab599564d86c588ced9161085691908590612fec565b610bca610ea0565b336000908152601b60205260409020600c54815410610bfb5760405162461bcd60e51b815260040161073b90612fa0565b600181015480610c1d5760405162461bcd60e51b815260040161073b90612e76565b600060018301819055825481526018602052604081205490670de0b6b3a7640000610c48838561304a565b610c529190613028565b90508060136000828254610c669190613069565b9091555050600754610c879061010090046001600160a01b031633836126e5565b835460405133917fa362bf831ec0975732381d8a2218cc84161953de04be755d93f9474860f432ee9161085691908590612fec565b610cc4610ea0565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610cf5903390600401612dd8565b60206040518083038186803b158015610d0d57600080fd5b505afa158015610d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d459190612d7f565b905081811015610d675760405162461bcd60e51b815260040161073b90612ee6565b8160146000828254610d799190613010565b9091555050336000908152601b60205260409020600181015415801590610da25750600c548154105b15610daf57610daf610bc2565b600c5481541015610dc057600c5481555b6000838260010154610dd29190613010565b6001830181905560085460405163a0f0bf7f60e01b81529192506001600160a01b03169063a0f0bf7f90610e0e90339030908990600401612e06565b602060405180830381600087803b158015610e2857600080fd5b505af1158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e609190612d44565b50336001600160a01b03167fd634a1ad9b45b7e951a1f30528c0209e937d46d164fd43268090f427349205a3600c54868460405161085693929190612ffa565b6000610eaa611b95565b905080600c5410610eb85750565b6000610ec2611484565b90506000610ece61251e565b90508115610f2c576000670de0b6b3a764000060065484610eef919061304a565b610ef99190613028565b905082600e54610f099190613069565b600e55610f168184613069565b600d54610f239190613010565b600d5550610f84565b8015610f84576000670de0b6b3a764000060065483610f4b919061304a565b610f559190613028565b905081600d54610f659190613069565b600d55610f728183613069565b600e54610f7f9190613010565b600e55505b7faed63947ee74099c60670bac488f65fecd95864d94817d4300ee62fa63afe188600c548284604051610fb993929190612ffa565b60405180910390a1600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561100f57600080fd5b505afa158015611023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110479190612d7f565b6011556000611054612740565b9050600061106061287a565b905060155481600d546110739190613069565b61107d9190613010565b600d8190555080601660008282546110959190613010565b90915550506000601555601254600e546110b0908490613069565b6110ba9190613010565b600e8190555081601360008282546110d29190613010565b9091555050600060128190556014819055601755600354600e54600d546040516345b05a4360e01b81526001600160a01b03909316926345b05a439261111c929091600401612fec565b604080518083038186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b9190612d98565b601055600f55505050600c9190915550565b611185612974565b61118d610ea0565b600081116111ad5760405162461bcd60e51b815260040161073b90612f12565b600754604051636eb1769f60e11b8152829161010090046001600160a01b03169063dd62ed3e906111e49033903090600401612dec565b60206040518083038186803b1580156111fc57600080fd5b505afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190612d7f565b10156112525760405162461bcd60e51b815260040161073b90612f72565b336000908152601c602052604090206001810154158015906112765750600c548154105b1561128357611283610702565b600c548154101561129457600c5481555b81601560008282546112a69190613010565b909155505060018101546000906112be908490613010565b600183018190556007549091506112e59061010090046001600160a01b031633308661299e565b336001600160a01b03167fae031a79e52a4da207e03aac3a3217f2cff9d56d24642655fbf7844a07f0f36a600c54858460405161132493929190612ffa565b60405180910390a2505050565b6113396129c5565b61136a816040518060400160405280600f81526020016e696e76616c6964206164647265737360881b815250612a08565b6002546040517f944f260fa5475db9151efe54fc9fb6df2b40f73533d9483011e94522398cb3c1916113a9916001600160a01b03909116908490612dec565b60405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142457600080fd5b505afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c9190612d7f565b90508061147257670de0b6b3a764000091505090565b80670de0b6b3a76400006109da61224d565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114d557600080fd5b505afa1580156114e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150d9190612d7f565b600454601154601054600d549394506001600160a01b039092169263aeec2edd9285916115386122b8565b6040516001600160e01b031960e088901b1681526004810195909552602485019390935260448401919091526064830152608482015260a40160206040518083038186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee9190612d7f565b6115c96129c5565b6001600160a01b0381166115ef5760405162461bcd60e51b815260040161073b90612f49565b6005546040517f461364f084b7657c2380660ebd35dd6c4560dc78cc6e9795919e53b4e257de839161162e916001600160a01b03909116908490612dec565b60405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b6116606129c5565b6001600160a01b0381166116865760405162461bcd60e51b815260040161073b90612f49565b6000546001600160a01b03828116911614156116b45760405162461bcd60e51b815260040161073b90612ea1565b6000546040517fe010a6a96c097bdc495fe0aa7b1c1343e8528bd70556da39cd47b0130555c190916116f3916001600160a01b03909116908490612dec565b60405180910390a1600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176e57600080fd5b505afa158015611782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a69190612d7f565b9050806117bc57670de0b6b3a764000091505090565b80670de0b6b3a7640000600e546109e4919061304a565b6117db610ea0565b336000908152601d60205260409020600c5481541061180c5760405162461bcd60e51b815260040161073b90612fa0565b60018101548061182e5760405162461bcd60e51b815260040161073b90612e76565b600060018301819055825481526019602052604081205490670de0b6b3a7640000611859838561304a565b6118639190613028565b905080601660008282546118779190613069565b90915550506007546118989061010090046001600160a01b031633836126e5565b835460405133917f014d40541bf53e076bad44aa8bfef33f82c777c0f04196e5582587bad9ee5b369161085691908590612fec565b6118d5612974565b6118dd610ea0565b600081116118fd5760405162461bcd60e51b815260040161073b90612f12565b600754604051636eb1769f60e11b8152829161010090046001600160a01b03169063dd62ed3e906119349033903090600401612dec565b60206040518083038186803b15801561194c57600080fd5b505afa158015611960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119849190612d7f565b10156119a25760405162461bcd60e51b815260040161073b90612f72565b336000908152601a602052604090206001810154158015906119c65750600c548154105b156119d3576119d3610a77565b600c54815410156119e457600c5481555b81601260008282546119f69190613010565b90915550506001810154600090611a0e908490613010565b60018301819055600754909150611a359061010090046001600160a01b031633308661299e565b336001600160a01b03167f81b0ac0867278845eee541a0351e48acc52b65ba1a469e840ad5a4f8a8650a2e600c54858460405161132493929190612ffa565b600080611a7f611484565b90508015611aba576000670de0b6b3a764000060065483611aa0919061304a565b611aaa9190613028565b9050611ab68183613069565b9150505b6000611ac461251e565b90508082600d54611ad59190613010565b611adf9190613069565b9250505090565b6000611af0612221565b611af86122b8565b6007546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190611b2c903090600401612dd8565b60206040518083038186803b158015611b4457600080fd5b505afa158015611b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7c9190612d7f565b611b869190613069565b611b909190613069565b905090565b6000600a54421015611ba75750600090565b600b54600a54611bb79042613069565b611bc19190613028565b611b90906001613010565b611bd46129c5565b611c05816040518060400160405280600f81526020016e696e76616c6964206164647265737360881b815250612a08565b6003546040517ffbbe86207337f27b9ba95decb76b63122f31b20555b8b3737055683611443aac91611c44916001600160a01b03909116908490612dec565b60405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000611c78611ae6565b905060008111611cb45760405162461bcd60e51b81526020600482015260076024820152666e6f206665657360c81b604482015260640161073b565b6005546001600160a01b0316611cdc5760405162461bcd60e51b815260040161073b90612ebf565b600554600754611cfe916001600160a01b0361010090920482169116836126e5565b6005546040517f6d86532cebce232743f74710d18164bfb38cbebf1ca203cb83382b9cf54cd9ac91611d3d9133916001600160a01b0316908590612e06565b60405180910390a150565b60075460ff1615611d9a5760405162461bcd60e51b815260206004820152601c60248201527b18dbdb9d1c9858dd08185b1c9958591e481a5b9a5d1a585b1a5e995960221b604482015260640161073b565b6007805460ff19166001179055611daf6129c5565b611db887611331565b611dc186611bcc565b611dca856120b7565b6001600160a01b038816611e1a5760405162461bcd60e51b81526020600482015260176024820152760706f6f6c20746f6b656e2063616e27742062652030783604c1b604482015260640161073b565b6001600160a01b038416611e6c5760405162461bcd60e51b815260206004820152601960248201527806a756e696f7220746f6b656e2063616e27742062652030783603c1b604482015260640161073b565b6001600160a01b038316611ebe5760405162461bcd60e51b8152602060048201526019602482015278073656e696f7220746f6b656e2063616e27742062652030783603c1b604482015260640161073b565b600780546001600160a01b03808b1661010002610100600160a81b031990921691909117909155600880549186166001600160a01b03199092168217905560408051638da5cb5b60e01b81529051309291638da5cb5b916004808301926020929190829003018186803b158015611f3457600080fd5b505afa158015611f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6c9190612c92565b6001600160a01b031614611fc25760405162461bcd60e51b815260206004820152601d60248201527f6a756e696f7220746f6b656e206f776e6572206d757374206265205341000000604482015260640161073b565b600980546001600160a01b0319166001600160a01b03851690811790915560408051638da5cb5b60e01b81529051309291638da5cb5b916004808301926020929190829003018186803b15801561201857600080fd5b505afa15801561202c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120509190612c92565b6001600160a01b0316146120a65760405162461bcd60e51b815260206004820152601d60248201527f73656e696f7220746f6b656e206f776e6572206d757374206265205341000000604482015260640161073b565b600a91909155600b55505050505050565b6120bf6129c5565b6120f0816040518060400160405280600f81526020016e696e76616c6964206164647265737360881b815250612a08565b6004546040517ffd041dbbf45fb8b18dc79ae79199a37ddc52c7559ac44fdd5fefb9aa9c2028439161212f916001600160a01b03909116908490612dec565b60405180910390a1600480546001600160a01b0319166001600160a01b0392909216919091179055565b6121616129c5565b801561218f576005546001600160a01b031661218f5760405162461bcd60e51b815260040161073b90612ebf565b670de0b6b3a76400008111156121e15760405162461bcd60e51b81526020600482015260176024820152761b585e081c195c98d95b9d1859d948195e18d959591959604a1b604482015260640161073b565b7fe5bd021bb3e7a336d89185c09eb4286717c23a651140650eeda4d774812cde1260065482604051612214929190612fec565b60405180910390a1600655565b60006016546013546015546012546122399190613010565b6122439190613010565b611b909190613010565b600080612258611484565b9050600061226461251e565b9050801561229f576000670de0b6b3a764000060065483612285919061304a565b61228f9190613028565b905061229b8183613069565b9150505b8082600e546122ae9190613069565b611adf9190613010565b6000600d54600e54611b909190613010565b6122d2612688565b600154600160a01b900460ff16156122fc5760405162461bcd60e51b815260040161073b90612fcc565b6001805460ff60a01b1916600160a01b1790556040517fee68d332edc397b95695f3d00eb879007ec02eb6733fe32e305cc12d406d03c190600090a1565b612342610ea0565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612373903390600401612dd8565b60206040518083038186803b15801561238b57600080fd5b505afa15801561239f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c39190612d7f565b9050818110156123e55760405162461bcd60e51b815260040161073b90612ee6565b81601760008282546123f79190613010565b9091555050336000908152601d602052604090206001810154158015906124205750600c548154105b1561242d5761242d6117d3565b600c548154101561243e57600c5481555b60008382600101546124509190613010565b6001830181905560095460405163a0f0bf7f60e01b81529192506001600160a01b03169063a0f0bf7f9061248c90339030908990600401612e06565b602060405180830381600087803b1580156124a657600080fd5b505af11580156124ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124de9190612d44565b50336001600160a01b03167f8fe0fbd18893ea6a3597f5ccec3e4494f92cc4cea7276a9a868c6a9bd1504e61600c54868460405161085693929190612ffa565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561256f57600080fd5b505afa158015612583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a79190612d7f565b600454601154600f54600d549394506001600160a01b039092169263cd91b1899285916115386122b8565b600080600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561262357600080fd5b505afa158015612637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265b9190612d7f565b90508061267157670de0b6b3a764000091505090565b80670de0b6b3a7640000600d546109e4919061304a565b6001546001600160a01b03163314806126ab57506000546001600160a01b031633145b6126e35760405162461bcd60e51b815260206004820152600960248201526810b3bab0b93234b0b760b91b604482015260640161073b565b565b61273b8363a9059cbb60e01b8484604051602401612704929190612e2a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a29565b505050565b60008061274b61171d565b600c54600090815260186020526040812082905560125491925090829061277b90670de0b6b3a76400009061304a565b6127859190613028565b6014549091506000670de0b6b3a76400006127a0858461304a565b6127aa9190613028565b90508183111561282b5760006127c08385613069565b6008546040516340c10f1960e01b81529192506001600160a01b0316906340c10f19906127f39030908590600401612e2a565b600060405180830381600087803b15801561280d57600080fd5b505af1158015612821573d6000803e3d6000fd5b5050505050612872565b8282111561287257600061283f8484613069565b600854604051632770a7eb60e21b81529192506001600160a01b031690639dc29fac906127f39030908590600401612e2a565b949350505050565b6000806128856125d2565b600c5460009081526019602052604081208290556015549192509082906128b590670de0b6b3a76400009061304a565b6128bf9190613028565b6017549091506000670de0b6b3a76400006128da858461304a565b6128e49190613028565b90508183111561292d5760006128fa8385613069565b6009546040516340c10f1960e01b81529192506001600160a01b0316906340c10f19906127f39030908590600401612e2a565b828211156128725760006129418484613069565b600954604051632770a7eb60e21b81529192506001600160a01b031690639dc29fac906127f39030908590600401612e2a565b600154600160a01b900460ff16156126e35760405162461bcd60e51b815260040161073b90612fcc565b6129bf846323b872dd60e01b85858560405160240161270493929190612e06565b50505050565b6000546001600160a01b031633146126e35760405162461bcd60e51b815260040161073b906020808252600490820152632164616f60e01b604082015260600190565b813b81816129bf5760405162461bcd60e51b815260040161073b9190612e43565b6000612a7e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612afb9092919063ffffffff16565b80519091501561273b5780806020019051810190612a9c9190612d44565b61273b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161073b565b6060612b0a8484600085612b14565b90505b9392505050565b606082471015612b755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161073b565b843b612bc35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161073b565b600080866001600160a01b03168587604051612bdf9190612dbc565b60006040518083038185875af1925050503d8060008114612c1c576040519150601f19603f3d011682016040523d82523d6000602084013e612c21565b606091505b5091509150612c31828286612c3c565b979650505050505050565b60608315612c4b575081612b0d565b825115612c5b5782518084602001fd5b8160405162461bcd60e51b815260040161073b9190612e43565b600060208284031215612c8757600080fd5b8135612b0d816130c2565b600060208284031215612ca457600080fd5b8151612b0d816130c2565b600080600080600080600080610100898b031215612ccc57600080fd5b8835612cd7816130c2565b97506020890135612ce7816130c2565b96506040890135612cf7816130c2565b95506060890135612d07816130c2565b94506080890135612d17816130c2565b935060a0890135612d27816130c2565b979a969950949793969295929450505060c08201359160e0013590565b600060208284031215612d5657600080fd5b81518015158114612b0d57600080fd5b600060208284031215612d7857600080fd5b5035919050565b600060208284031215612d9157600080fd5b5051919050565b60008060408385031215612dab57600080fd5b505080516020909101519092909150565b60008251612dce818460208701613080565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152612e62816040850160208701613080565b601f01601f19169190910160400192915050565b6020808252601190820152706e6f7468696e6720746f2072656465656d60781b604082015260600190565b602080825260049082015263216e657760e01b604082015260600190565b6020808252600d908201526c3737903332b2b99037bbb732b960991b604082015260600190565b6020808252601290820152716e6f7420656e6f7567682062616c616e636560701b604082015260600190565b6020808252601d908201527f616d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b6020808252601490820152736e6f7420656e6f75676820616c6c6f77616e636560601b604082015260600190565b6020808252601290820152711b9bdd081c995919595b58589b19481e595d60721b604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60008219821115613023576130236130ac565b500190565b60008261304557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613064576130646130ac565b500290565b60008282101561307b5761307b6130ac565b500390565b60005b8381101561309b578181015183820152602001613083565b838111156129bf5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146130d757600080fd5b5056fea26469706673582212208e1bc10bc2e6b23d55ab9baefa4caa6c44eb9a3627faac83c544d72931f0391064736f6c63430008060033"
}