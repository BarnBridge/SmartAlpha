{
  "address": "0xd123a3658eA8557e947d464B932C4e17c0e2bEF3",
  "abi": [
    {
      "inputs": [],
      "name": "b1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "b2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "juniorLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seniorLiquidity",
          "type": "uint256"
        }
      ],
      "name": "calcRateSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "juniorLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seniorLiquidity",
          "type": "uint256"
        }
      ],
      "name": "getDownsideProtectionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "juniorLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seniorLiquidity",
          "type": "uint256"
        }
      ],
      "name": "getRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "juniorLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seniorLiquidity",
          "type": "uint256"
        }
      ],
      "name": "getUpsideExposureRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "m1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "m2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scaleFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "solcInputHash": "db9c5199da5e6f14fdc5cc69d9b2dfeb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"b1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"b2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidity\",\"type\":\"uint256\"}],\"name\":\"calcRateSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidity\",\"type\":\"uint256\"}],\"name\":\"getDownsideProtectionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidity\",\"type\":\"uint256\"}],\"name\":\"getRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidity\",\"type\":\"uint256\"}],\"name\":\"getUpsideExposureRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calcRateSum(uint256,uint256)\":{\"details\":\"Leave this function last in the contract to circumvent a bug in the docgen procedure\",\"params\":{\"juniorLiquidity\":\"The total amount of junior liquidity in the pool\",\"seniorLiquidity\":\"The total amount of senior liquidity in the pool\"},\"returns\":{\"_0\":\"uint256 The sum available to split between protection and exposure, scaled by scaleFactor\"}},\"getDownsideProtectionRate(uint256,uint256)\":{\"params\":{\"juniorLiquidity\":\"The total amount of junior liquidity in the pool\",\"seniorLiquidity\":\"The total amount of senior liquidity in the pool\"},\"returns\":{\"_0\":\"uint256 The downside protection rate, scaled by `scaleFactor`\"}},\"getRates(uint256,uint256)\":{\"params\":{\"juniorLiquidity\":\"The total amount of junior liquidity in the pool\",\"seniorLiquidity\":\"The total amount of senior liquidity in the pool\"},\"returns\":{\"_0\":\"(uint256, uint256) The upside exposure rate and downside protection rate scaled by `scaleFactor`\"}},\"getUpsideExposureRate(uint256,uint256)\":{\"params\":{\"juniorLiquidity\":\"The total amount of junior liquidity in the pool\",\"seniorLiquidity\":\"The total amount of senior liquidity in the pool\"},\"returns\":{\"_0\":\"uint256 The upside exposure rate, scaled by `scaleFactor`\"}}},\"stateVariables\":{\"m1\":{\"details\":\"The equation of the line is calculated using the y = mx + b formula where m is the slope of the line and b is the y-intercept\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calcRateSum(uint256,uint256)\":{\"notice\":\"Calculate the sum of upside exposure rate and downside protection rate\"},\"getDownsideProtectionRate(uint256,uint256)\":{\"notice\":\"Get the downside protection rate based on the current pool conditions\"},\"getUpsideExposureRate(uint256,uint256)\":{\"notice\":\"Get the upside exposure rate based on the current pool conditions\"},\"m1()\":{\"notice\":\"m1, b1 and m2, b2 are the coefficients corresponding to the lines used to calculate the rate sum\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/models/SeniorRateModelV3.sol\":\"SeniorRateModelV3\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ISeniorRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface ISeniorRateModel {\\n    function getRates(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256, uint256);\\n    function getUpsideExposureRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256);\\n    function getDownsideProtectionRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5de0ad8fe825db0fb964764f5095c2ff60fe29c5c8cd7c070e1326d7c05966e5\",\"license\":\"Apache-2.0\"},\"contracts/models/SeniorRateModelV3.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../interfaces/ISeniorRateModel.sol\\\";\\n\\ncontract SeniorRateModelV3 is ISeniorRateModel {\\n    uint256 constant public scaleFactor = 10 ** 18;\\n\\n    /// @notice m1, b1 and m2, b2 are the coefficients corresponding to the lines used to calculate the rate sum\\n    /// @dev The equation of the line is calculated using the y = mx + b formula where m is the slope of the line and b is the y-intercept\\n    // f(x) = -18*x + 1\\n    uint256 constant public m1 = 18 * scaleFactor; // -18\\n    uint256 constant public b1 = scaleFactor; // +1\\n\\n    // f(x) = (18/19)*x + 1/19\\n    uint256 constant public m2 = 18 * scaleFactor / 19; // 18/19\\n    uint256 constant public b2 = scaleFactor / 19; // 1/19\\n\\n    uint256 constant splitPoint = 5 * scaleFactor / 100;\\n\\n    uint256 constant maxProtectionPercentage = 80 * scaleFactor / 100;\\n    uint256 constant maxProtectionAbsolute = 35 * scaleFactor / 100;\\n\\n    // @notice Get the rates offered to seniors based on the current pool conditions\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return (uint256, uint256) The upside exposure rate and downside protection rate scaled by `scaleFactor`\\n    function getRates(uint256 juniorLiquidity, uint256 seniorLiquidity) external pure override returns (uint256, uint256) {\\n        uint256 sum = calcRateSum(juniorLiquidity, seniorLiquidity);\\n        uint256 protection = getDownsideProtectionRate(juniorLiquidity, seniorLiquidity);\\n\\n        return (sum - protection, protection);\\n    }\\n\\n    /// @notice Get the upside exposure rate based on the current pool conditions\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return uint256 The upside exposure rate, scaled by `scaleFactor`\\n    function getUpsideExposureRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external pure override returns (uint256) {\\n        uint256 sum = calcRateSum(juniorLiquidity, seniorLiquidity);\\n        uint256 protection = getDownsideProtectionRate(juniorLiquidity, seniorLiquidity);\\n\\n        return sum - protection;\\n    }\\n\\n    /// @notice Get the downside protection rate based on the current pool conditions\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return uint256 The downside protection rate, scaled by `scaleFactor`\\n    function getDownsideProtectionRate(uint256 juniorLiquidity, uint256 seniorLiquidity) public pure override returns (uint256) {\\n        uint256 total = juniorLiquidity + seniorLiquidity;\\n        if (total == 0) {\\n            return 0;\\n        }\\n\\n        uint256 protection = maxProtectionPercentage * juniorLiquidity / total;\\n\\n        if (protection <= maxProtectionAbsolute) {\\n            return protection;\\n        }\\n\\n        return maxProtectionAbsolute;\\n    }\\n\\n    /// @notice Calculate the sum of upside exposure rate and downside protection rate\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return uint256 The sum available to split between protection and exposure, scaled by scaleFactor\\n    /// @dev Leave this function last in the contract to circumvent a bug in the docgen procedure\\n    function calcRateSum(uint256 juniorLiquidity, uint256 seniorLiquidity) public pure returns (uint256) {\\n        uint256 total = juniorLiquidity + seniorLiquidity;\\n        if (total == 0) {\\n            return scaleFactor;\\n        }\\n\\n        uint256 juniorDominance = juniorLiquidity * scaleFactor / total;\\n\\n        if (juniorDominance < splitPoint) {\\n            return b1 - m1 * juniorLiquidity / total;\\n        }\\n\\n        return m2 * juniorLiquidity / total + b2;\\n    }\\n}\\n\",\"keccak256\":\"0x551faf1db6ea8e2f5f6a02a250b19d2b97d1cec8001e05e2d61e4966c24fa294\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610455806100206000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c80630add6ef214610088578063428cc9b2146100a357806345b05a43146100b65780635b2842c9146100de578063683dd191146100f157806391aa69ca14610100578063a77f92ff14610108578063acb62a5a14610110578063ee495002146100f1575b600080fd5b610090610123565b6040519081526020015b60405180910390f35b6100906100b1366004610377565b610139565b6100c96100c4366004610377565b610246565b6040805192835260208301919091520161009a565b6100906100ec366004610377565b61027a565b610090670de0b6b3a764000081565b61009061031e565b61009061033d565b61009061011e366004610377565b610350565b6101366013670de0b6b3a76400006103b1565b81565b6000806101468385610399565b90508061015e57670de0b6b3a7640000915050610240565b600081610173670de0b6b3a7640000876103d3565b61017d91906103b1565b90506064610194670de0b6b3a764000060056103d3565b61019e91906103b1565b8110156101e95781856101ba670de0b6b3a764000060126103d3565b6101c491906103d3565b6101ce91906103b1565b6101e090670de0b6b3a76400006103f2565b92505050610240565b6101fc6013670de0b6b3a76400006103b1565b82866013610213670de0b6b3a764000060126103d3565b61021d91906103b1565b61022791906103d3565b61023191906103b1565b61023b9190610399565b925050505b92915050565b60008060006102558585610139565b90506000610263868661027a565b905061026f81836103f2565b969095509350505050565b6000806102878385610399565b905080610298576000915050610240565b6000818560646102b1670de0b6b3a764000060506103d3565b6102bb91906103b1565b6102c591906103d3565b6102cf91906103b1565b905060646102e6670de0b6b3a764000060236103d3565b6102f091906103b1565b81116102ff5791506102409050565b6064610314670de0b6b3a764000060236103d3565b61023b91906103b1565b6013610333670de0b6b3a764000060126103d3565b61013691906103b1565b610136670de0b6b3a764000060126103d3565b60008061035d8484610139565b9050600061036b858561027a565b905061023b81836103f2565b6000806040838503121561038a57600080fd5b50508035926020909101359150565b600082198211156103ac576103ac610409565b500190565b6000826103ce57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156103ed576103ed610409565b500290565b60008282101561040457610404610409565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205b1dd8fec899e93eadbc55495c4329e9375fa9726a92cdae0f1515575157e07964736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100835760003560e01c80630add6ef214610088578063428cc9b2146100a357806345b05a43146100b65780635b2842c9146100de578063683dd191146100f157806391aa69ca14610100578063a77f92ff14610108578063acb62a5a14610110578063ee495002146100f1575b600080fd5b610090610123565b6040519081526020015b60405180910390f35b6100906100b1366004610377565b610139565b6100c96100c4366004610377565b610246565b6040805192835260208301919091520161009a565b6100906100ec366004610377565b61027a565b610090670de0b6b3a764000081565b61009061031e565b61009061033d565b61009061011e366004610377565b610350565b6101366013670de0b6b3a76400006103b1565b81565b6000806101468385610399565b90508061015e57670de0b6b3a7640000915050610240565b600081610173670de0b6b3a7640000876103d3565b61017d91906103b1565b90506064610194670de0b6b3a764000060056103d3565b61019e91906103b1565b8110156101e95781856101ba670de0b6b3a764000060126103d3565b6101c491906103d3565b6101ce91906103b1565b6101e090670de0b6b3a76400006103f2565b92505050610240565b6101fc6013670de0b6b3a76400006103b1565b82866013610213670de0b6b3a764000060126103d3565b61021d91906103b1565b61022791906103d3565b61023191906103b1565b61023b9190610399565b925050505b92915050565b60008060006102558585610139565b90506000610263868661027a565b905061026f81836103f2565b969095509350505050565b6000806102878385610399565b905080610298576000915050610240565b6000818560646102b1670de0b6b3a764000060506103d3565b6102bb91906103b1565b6102c591906103d3565b6102cf91906103b1565b905060646102e6670de0b6b3a764000060236103d3565b6102f091906103b1565b81116102ff5791506102409050565b6064610314670de0b6b3a764000060236103d3565b61023b91906103b1565b6013610333670de0b6b3a764000060126103d3565b61013691906103b1565b610136670de0b6b3a764000060126103d3565b60008061035d8484610139565b9050600061036b858561027a565b905061023b81836103f2565b6000806040838503121561038a57600080fd5b50508035926020909101359150565b600082198211156103ac576103ac610409565b500190565b6000826103ce57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156103ed576103ed610409565b500290565b60008282101561040457610404610409565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205b1dd8fec899e93eadbc55495c4329e9375fa9726a92cdae0f1515575157e07964736f6c63430008060033"
}