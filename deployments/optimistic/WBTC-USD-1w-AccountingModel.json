{
  "address": "0xAeeF681Ce023E7a157AaBbc88C5a6922aa7F2A31",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upsideExposureRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSeniors",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "calcJuniorProfits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downsideProtectionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSeniors",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "calcSeniorProfits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scaleFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "solcInputHash": "db9c5199da5e6f14fdc5cc69d9b2dfeb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upsideExposureRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSeniors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calcJuniorProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downsideProtectionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSeniors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calcSeniorProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calcSeniorProfits(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"It always returns 0 if the price went up.\",\"returns\":{\"_0\":\"The amount, in pool tokens, that is considered loss for the juniors\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calcSeniorProfits(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the junior losses (in other words, senior profits) based on the current pool conditions\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/models/AccountingModel.sol\":\"AccountingModel\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IAccountingModel.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface IAccountingModel {\\n    function calcJuniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 upsideExposureRate,\\n        uint256 totalSeniors,\\n        uint256 totalBalance\\n    ) external pure returns (uint256);\\n\\n    function calcSeniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 downsideProtectionRate,\\n        uint256 totalSeniors,\\n        uint256 totalBalance\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x464f2c1f6a2f60a144cbd6da1d15859794c972897f7b3b1d9da856fd0ab27358\",\"license\":\"Apache-2.0\"},\"contracts/models/AccountingModel.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../interfaces/IAccountingModel.sol\\\";\\n\\ncontract AccountingModel is IAccountingModel {\\n    uint256 constant public scaleFactor = 10 ** 18;\\n\\n    function calcJuniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 upsideExposureRate,\\n        uint256 totalSeniors,\\n        uint256 //totalBalance\\n    ) public pure override returns (uint256) {\\n        // price went down => there are no profits for the juniors\\n        if (currentPrice <= entryPrice) {\\n            return 0;\\n        }\\n\\n        uint256 x = currentPrice - entryPrice;\\n        uint256 y = scaleFactor - upsideExposureRate;\\n\\n        // (current price - entry price) * (1 - upside rate) * total seniors / current price\\n        return x * y * totalSeniors / currentPrice / scaleFactor;\\n    }\\n\\n    /// @notice Calculates the junior losses (in other words, senior profits) based on the current pool conditions\\n    /// @dev It always returns 0 if the price went up.\\n    /// @return The amount, in pool tokens, that is considered loss for the juniors\\n    function calcSeniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 downsideProtectionRate,\\n        uint256 totalSeniors,\\n        uint256 //totalBalance\\n    ) public pure override returns (uint256) {\\n        // price went up => there are no losses for the juniors\\n        if (entryPrice <= currentPrice) {\\n            return 0;\\n        }\\n\\n        // entryPrice * (1 - downsideProtectionRate) + 1\\n        // adding +1 to avoid rounding errors that would cause it to return profits that are greater than the junior liquidity\\n        // minPrice would end up equal to 0 if the downsideProtectionRate is 100%\\n        uint256 minPrice = entryPrice * (scaleFactor - downsideProtectionRate) / scaleFactor + 1;\\n\\n        // when there are no juniors in the pool and the downside protection rate is 0,\\n        // the minPrice would be equal to `entryPrice + 1`\\n        if (entryPrice <= minPrice) {\\n            return 0;\\n        }\\n\\n        uint256 calcPrice = currentPrice;\\n        if (calcPrice < minPrice) {\\n            calcPrice = minPrice;\\n        }\\n\\n        return totalSeniors * entryPrice / calcPrice - totalSeniors;\\n    }\\n}\\n\",\"keccak256\":\"0x23326fc9d1570b6ab60da1cdf5c1dd6d7aefe1b6e50ad7906e621d70891df0a3\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061027e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063683dd19114610046578063aeec2edd14610067578063cd91b1891461007a575b600080fd5b610055670de0b6b3a764000081565b60405190815260200160405180910390f35b610055610075366004610187565b61008d565b610055610088366004610187565b61011f565b600084861161009e57506000610116565b6000670de0b6b3a76400006100b3868261021b565b6100bd90896101fc565b6100c791906101da565b6100d29060016101c2565b90508087116100e5576000915050610116565b85818110156100f15750805b84816100fd8a836101fc565b61010791906101da565b610111919061021b565b925050505b95945050505050565b600085851161013057506000610116565b600061013c878761021b565b9050600061015286670de0b6b3a764000061021b565b9050670de0b6b3a7640000878661016984866101fc565b61017391906101fc565b61017d91906101da565b61011191906101da565b600080600080600060a0868803121561019f57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600082198211156101d5576101d5610232565b500190565b6000826101f757634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561021657610216610232565b500290565b60008282101561022d5761022d610232565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203707b7578c73335284dcb613c44e09da139107ca97495650dfee58bb6f8c422964736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063683dd19114610046578063aeec2edd14610067578063cd91b1891461007a575b600080fd5b610055670de0b6b3a764000081565b60405190815260200160405180910390f35b610055610075366004610187565b61008d565b610055610088366004610187565b61011f565b600084861161009e57506000610116565b6000670de0b6b3a76400006100b3868261021b565b6100bd90896101fc565b6100c791906101da565b6100d29060016101c2565b90508087116100e5576000915050610116565b85818110156100f15750805b84816100fd8a836101fc565b61010791906101da565b610111919061021b565b925050505b95945050505050565b600085851161013057506000610116565b600061013c878761021b565b9050600061015286670de0b6b3a764000061021b565b9050670de0b6b3a7640000878661016984866101fc565b61017391906101fc565b61017d91906101da565b61011191906101da565b600080600080600060a0868803121561019f57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600082198211156101d5576101d5610232565b500190565b6000826101f757634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561021657610216610232565b500290565b60008282101561022d5761022d610232565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203707b7578c73335284dcb613c44e09da139107ca97495650dfee58bb6f8c422964736f6c63430008060033"
}