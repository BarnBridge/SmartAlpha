{
  "address": "0xa58388d37a47D572900d1B33E9fd1277e6006b08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "chainlinkAggregator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "juniorTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "juniorTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "seniorTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "seniorTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "epoch1Start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochDuration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "reverseOracle",
          "type": "bool"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract SmartAlpha",
          "name": "smartAlpha",
          "type": "address"
        },
        {
          "internalType": "contract ISeniorRateModel",
          "name": "seniorRateModel",
          "type": "address"
        },
        {
          "internalType": "contract IAccountingModel",
          "name": "accountingModel",
          "type": "address"
        },
        {
          "internalType": "contract OwnableERC20",
          "name": "juniorToken",
          "type": "address"
        },
        {
          "internalType": "contract OwnableERC20",
          "name": "seniorToken",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracle",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xccee8a541c1c29584808a91acddf880e64cd7b4faba3c5ebc5118ea2f4656ba6",
  "receipt": {
    "to": null,
    "from": "0xB011D306D36c396847bA42b1c7AEb8E96C540d9a",
    "contractAddress": "0xa58388d37a47D572900d1B33E9fd1277e6006b08",
    "transactionIndex": 0,
    "gasUsed": "5339025",
    "logsBloom": "0x
    "blockHash": "0x3900d13cd42171012c804cce65d5b404a236409bf0a691c115fa516357a812d8",
    "transactionHash": "0xccee8a541c1c29584808a91acddf880e64cd7b4faba3c5ebc5118ea2f4656ba6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 318963,
        "transactionHash": "0xccee8a541c1c29584808a91acddf880e64cd7b4faba3c5ebc5118ea2f4656ba6",
        "address": "0xa58388d37a47D572900d1B33E9fd1277e6006b08",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b011d306d36c396847ba42b1c7aeb8e96c540d9a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3900d13cd42171012c804cce65d5b404a236409bf0a691c115fa516357a812d8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 318963,
        "transactionHash": "0xccee8a541c1c29584808a91acddf880e64cd7b4faba3c5ebc5118ea2f4656ba6",
        "address": "0xa58388d37a47D572900d1B33E9fd1277e6006b08",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b011d306d36c396847ba42b1c7aeb8e96c540d9a",
          "0x000000000000000000000000b011d306d36c396847ba42b1c7aeb8e96c540d9a"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x3900d13cd42171012c804cce65d5b404a236409bf0a691c115fa516357a812d8"
      }
    ],
    "blockNumber": 318963,
    "cumulativeGasUsed": "5339025",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB011D306D36c396847bA42b1c7AEb8E96C540d9a"
  ],
  "solcInputHash": "1423f1c3a8ce78374bbc058f7c11de70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainlinkAggregator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"juniorTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"juniorTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"seniorTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"seniorTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"epoch1Start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reverseOracle\",\"type\":\"bool\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract SmartAlpha\",\"name\":\"smartAlpha\",\"type\":\"address\"},{\"internalType\":\"contract ISeniorRateModel\",\"name\":\"seniorRateModel\",\"type\":\"address\"},{\"internalType\":\"contract IAccountingModel\",\"name\":\"accountingModel\",\"type\":\"address\"},{\"internalType\":\"contract OwnableERC20\",\"name\":\"juniorToken\",\"type\":\"address\"},{\"internalType\":\"contract OwnableERC20\",\"name\":\"seniorToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/Governed.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"./interfaces/ISeniorRateModel.sol\\\";\\nimport \\\"./interfaces/IAccountingModel.sol\\\";\\nimport \\\"./SmartAlphaEvents.sol\\\";\\n\\n/// @notice Governance functions for SmartAlpha\\n/// @dev It defines a DAO and a Guardian\\n/// From a privilege perspective, the DAO is also considered Guardian, allowing it to execute any action\\n/// that the Guardian can do.\\nabstract contract Governed is SmartAlphaEvents {\\n    address public dao;\\n    address public guardian;\\n\\n    bool public paused;\\n\\n    IPriceOracle public priceOracle;\\n    ISeniorRateModel public seniorRateModel;\\n    IAccountingModel public accountingModel;\\n\\n    uint256 public constant MAX_FEES_PERCENTAGE = 5 * 10 ** 16; // 5% * 10^18\\n    address public feesOwner;\\n    uint256 public feesPercentage;\\n\\n    constructor (address _dao, address _guardian) {\\n        require(_dao != address(0), \\\"invalid address\\\");\\n        require(_guardian != address(0), \\\"invalid address\\\");\\n\\n        dao = _dao;\\n        guardian = _guardian;\\n    }\\n\\n    /// @notice Transfer the DAO to a new address\\n    /// @dev Only callable by the current DAO. The new dao cannot be address(0) or the same dao.\\n    /// @param newDAO The address of the new dao\\n    function transferDAO(address newDAO) public {\\n        enforceCallerDAO();\\n        require(newDAO != address(0), \\\"invalid address\\\");\\n        require(newDAO != dao, \\\"!new\\\");\\n\\n        emit TransferDAO(dao, newDAO);\\n\\n        dao = newDAO;\\n    }\\n\\n    /// @notice Transfer the Guardian to a new address\\n    /// @dev Callable by the current DAO or the current Guardian. The new Guardian cannot be address(0)\\n    /// or the same as before.\\n    /// @param newGuardian The address of the new Guardian\\n    function transferGuardian(address newGuardian) public {\\n        enforceCallerGuardian();\\n        require(newGuardian != address(0), \\\"invalid address\\\");\\n        require(newGuardian != guardian, \\\"!new\\\");\\n\\n        emit TransferGuardian(guardian, newGuardian);\\n\\n        guardian = newGuardian;\\n    }\\n\\n    /// @notice Pause the deposits into the system\\n    /// @dev Callable by DAO or Guardian. It will block any junior & senior deposits until resumed.\\n    function pauseSystem() public {\\n        enforceCallerGuardian();\\n        require(!paused, \\\"paused\\\");\\n\\n        paused = true;\\n\\n        emit PauseSystem();\\n    }\\n\\n    /// @notice Resume the deposits into the system\\n    /// @dev Callable by DAO or Guardian. It will resume deposits.\\n    function resumeSystem() public {\\n        enforceCallerGuardian();\\n        require(paused, \\\"!paused\\\");\\n\\n        paused = false;\\n\\n        emit ResumeSystem();\\n    }\\n\\n    /// @notice Change the price oracle\\n    /// @dev Only callable by DAO. The address of the new price oracle must have contract code.\\n    /// @param newPriceOracle The address of the new price oracle contract\\n    function setPriceOracle(address newPriceOracle) public {\\n        enforceCallerDAO();\\n        enforceHasContractCode(newPriceOracle, \\\"invalid address\\\");\\n\\n        emit SetPriceOracle(address(priceOracle), newPriceOracle);\\n\\n        priceOracle = IPriceOracle(newPriceOracle);\\n    }\\n\\n    /// @notice Change the senior rate model contract\\n    /// @dev Only callable by DAO. The address of the new contract must have code.\\n    /// @param newModel The address of the new model\\n    function setSeniorRateModel(address newModel) public {\\n        enforceCallerDAO();\\n        enforceHasContractCode(newModel, \\\"invalid address\\\");\\n\\n        emit SetSeniorRateModel(address(seniorRateModel), newModel);\\n\\n        seniorRateModel = ISeniorRateModel(newModel);\\n    }\\n\\n    /// @notice Change the accounting model contract\\n    /// @dev Only callable by DAO. The address of the new contract must have code.\\n    /// @param newModel The address of the new model\\n    function setAccountingModel(address newModel) public {\\n        enforceCallerDAO();\\n        enforceHasContractCode(newModel, \\\"invalid address\\\");\\n\\n        emit SetAccountingModel(address(accountingModel), newModel);\\n\\n        accountingModel = IAccountingModel(newModel);\\n    }\\n\\n    /// @notice Change the owner of the fees\\n    /// @dev Only callable by DAO. The new owner must not be 0 address.\\n    /// @param newOwner The address to which fees will be transferred\\n    function setFeesOwner(address newOwner) public {\\n        enforceCallerDAO();\\n        require(newOwner != address(0), \\\"invalid address\\\");\\n\\n        emit SetFeesOwner(feesOwner, newOwner);\\n\\n        feesOwner = newOwner;\\n    }\\n\\n    /// @notice Change the percentage of the fees applied\\n    /// @dev Only callable by DAO. If the percentage is greater than 0, it must also have a fees owner.\\n    /// @param percentage The percentage of profits to be taken as fee\\n    function setFeesPercentage(uint256 percentage) public {\\n        enforceCallerDAO();\\n        if (percentage > 0) {\\n            require(feesOwner != address(0), \\\"no fees owner\\\");\\n        }\\n        require(percentage < MAX_FEES_PERCENTAGE, \\\"max percentage exceeded\\\");\\n\\n        emit SetFeesPercentage(feesPercentage, percentage);\\n\\n        feesPercentage = percentage;\\n    }\\n\\n    /// @notice Helper function to enforce that the call comes from the DAO\\n    /// @dev Reverts the execution if msg.sender is not the DAO.\\n    function enforceCallerDAO() internal view {\\n        require(msg.sender == dao, \\\"!dao\\\");\\n    }\\n\\n    /// @notice Helper function to enforce that the call comes from the Guardian\\n    /// @dev Reverts the execution if msg.sender is not the Guardian.\\n    function enforceCallerGuardian() internal view {\\n        require(msg.sender == guardian || msg.sender == dao, \\\"!guardian\\\");\\n    }\\n\\n    /// @notice Helper function to block any action while the system is paused\\n    /// @dev Reverts the execution if the system is paused\\n    function enforceSystemNotPaused() internal view {\\n        require(!paused, \\\"paused\\\");\\n    }\\n\\n    /// @notice Helper function to check for contract code at given address\\n    /// @dev Reverts if there's no code at the given address.\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xea3784b97407c9d91f510bb61b81325c6ec607f2d6a4fa5089b2b5e6f81e0128\",\"license\":\"Apache-2.0\"},\"contracts/OwnableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title A token that allows advanced privileges to its owner\\n/// @notice Allows the owner to mint, burn and transfer tokens without requiring explicit user approval\\ncontract OwnableERC20 is ERC20, Ownable {\\n    uint8 private _dec;\\n\\n    constructor(string memory name, string memory symbol, uint8 _decimals) ERC20(name, symbol) {\\n        _dec = _decimals;\\n    }\\n\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    /// For example, if `decimals` equals `2`, a balance of `505` tokens should\\n    /// be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    ///\\n    /// Tokens usually opt for a value of 18, imitating the relationship between\\n    /// Ether and Wei. This is the value {ERC20} uses, unless this function is\\n    /// overridden;\\n    ///\\n    /// NOTE: This information is only used for _display_ purposes: it in\\n    /// no way affects any of the arithmetic of the contract, including\\n    /// {IERC20-balanceOf} and {IERC20-transfer}.\\n    function decimals() public view override returns (uint8) {\\n        return _dec;\\n    }\\n\\n    /// @notice Allow the owner of the contract to mint an amount of tokens to the specified user\\n    /// @dev Only callable by owner\\n    /// @dev Emits a Transfer from the 0 address\\n    /// @param user The address of the user to mint tokens for\\n    /// @param amount The amount of tokens to mint\\n    function mint(address user, uint256 amount) public onlyOwner {\\n        _mint(user, amount);\\n    }\\n\\n    /// @notice Allow the owner of the contract to burn an amount of tokens from the specified user address\\n    /// @dev Only callable by owner\\n    /// @dev The user's balance must be at least equal to the amount specified\\n    /// @dev Emits a Transfer to the 0 address\\n    /// @param user The address of the user from which to burn tokens\\n    /// @param amount The amount of tokens to burn\\n    function burn(address user, uint256 amount) public onlyOwner {\\n        _burn(user, amount);\\n    }\\n\\n    /// @notice Allow the owner of the contract to transfer an amount of tokens from sender to recipient\\n    /// @dev Only callable by owner\\n    /// @dev Acts just like transferFrom but without the allowance check\\n    /// @param sender The address of the account from which to transfer tokens\\n    /// @param recipient The address of the account to which to transfer tokens\\n    /// @param amount The amount of tokens to transfer\\n    /// @return bool (always true)\\n    function transferAsOwner(address sender, address recipient, uint256 amount) public onlyOwner returns (bool){\\n        _transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2e94bd4cb9ba79db4f766e43e907ed79883ce6dcd3c3f395632ddade9f5a3d78\",\"license\":\"Apache-2.0\"},\"contracts/PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./SmartAlpha.sol\\\";\\nimport \\\"./models/AccountingModel.sol\\\";\\nimport \\\"./models/SeniorRateModelV3.sol\\\";\\nimport \\\"./oracles/ChainlinkOracle.sol\\\";\\nimport \\\"./oracles/ChainlinkOracleReverse.sol\\\";\\n\\ncontract PoolFactory is Ownable {\\n    struct Pool {\\n        SmartAlpha smartAlpha;\\n        ISeniorRateModel seniorRateModel;\\n        IAccountingModel accountingModel;\\n        OwnableERC20 juniorToken;\\n        OwnableERC20 seniorToken;\\n        IPriceOracle oracle;\\n    }\\n\\n    Pool[] public pools;\\n    uint256 public numberOfPools;\\n\\n    constructor (address owner) {\\n        transferOwnership(owner);\\n    }\\n\\n    function deploy(\\n        address dao,\\n        address guardian,\\n        address poolToken,\\n        address chainlinkAggregator,\\n        string memory juniorTokenName,\\n        string memory juniorTokenSymbol,\\n        string memory seniorTokenName,\\n        string memory seniorTokenSymbol,\\n        uint256 epoch1Start,\\n        uint256 epochDuration,\\n        bool reverseOracle\\n    ) public onlyOwner {\\n        Pool memory p;\\n        p.smartAlpha = new SmartAlpha(address(this), guardian);\\n        p.seniorRateModel = new SeniorRateModelV3();\\n        p.accountingModel = new AccountingModel();\\n\\n        if (reverseOracle) {\\n            p.oracle = new ChainlinkOracleReverse(chainlinkAggregator);\\n        } else {\\n            p.oracle = new ChainlinkOracle(chainlinkAggregator);\\n        }\\n\\n        uint8 decimals = IERC20Metadata(poolToken).decimals();\\n\\n        p.juniorToken = new OwnableERC20(juniorTokenName, juniorTokenSymbol, decimals);\\n        p.juniorToken.transferOwnership(address(p.smartAlpha));\\n\\n        p.seniorToken = new OwnableERC20(seniorTokenName, seniorTokenSymbol, decimals);\\n        p.seniorToken.transferOwnership(address(p.smartAlpha));\\n\\n        p.smartAlpha.initialize(\\n            poolToken,\\n            address(p.oracle),\\n            address(p.seniorRateModel),\\n            address(p.accountingModel),\\n            address(p.juniorToken),\\n            address(p.seniorToken),\\n            epoch1Start,\\n            epochDuration\\n        );\\n\\n        p.smartAlpha.transferDAO(dao);\\n\\n        pools.push(p);\\n        numberOfPools++;\\n    }\\n}\\n\",\"keccak256\":\"0x0802bf90d2e61505ca3de25d47a379ebe55b3733440fdeaf4f6a21ae1b2d364b\",\"license\":\"Apache-2.0\"},\"contracts/SmartAlpha.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./OwnableERC20.sol\\\";\\nimport \\\"./interfaces/ISeniorRateModel.sol\\\";\\nimport \\\"./Governed.sol\\\";\\n\\n/// @title SMART Alpha\\n/// @notice This contract implements the main logic of the system.\\ncontract SmartAlpha is Governed {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant public scaleFactor = 10 ** 18;\\n\\n    bool public initialized;\\n\\n    IERC20 public poolToken;\\n\\n    OwnableERC20 public juniorToken;\\n    OwnableERC20 public seniorToken;\\n\\n    uint256 public epoch1Start;\\n    uint256 public epochDuration;\\n\\n    /// epoch accounting\\n    uint256 public epoch;\\n    uint256 public epochSeniorLiquidity;\\n    uint256 public epochJuniorLiquidity;\\n    uint256 public epochUpsideExposureRate;\\n    uint256 public epochDownsideProtectionRate;\\n    uint256 public epochEntryPrice;\\n\\n    uint256 public queuedJuniorsUnderlyingIn;\\n    uint256 public queuedJuniorsUnderlyingOut;\\n    uint256 public queuedJuniorTokensBurn;\\n\\n    uint256 public queuedSeniorsUnderlyingIn;\\n    uint256 public queuedSeniorsUnderlyingOut;\\n    uint256 public queuedSeniorTokensBurn;\\n\\n    /// history management\\n    mapping(uint256 => uint256) public history_epochJuniorTokenPrice;\\n    mapping(uint256 => uint256) public history_epochSeniorTokenPrice;\\n\\n    // a user can have only one queue position at a time\\n    // if they try a new deposit while there's a queue position redeemable, it will be automatically redeemed\\n    struct QueuePosition {\\n        uint256 epoch;\\n        uint256 amount;\\n    }\\n\\n    mapping(address => QueuePosition) public juniorEntryQueue;\\n    mapping(address => QueuePosition) public juniorExitQueue;\\n    mapping(address => QueuePosition) public seniorEntryQueue;\\n    mapping(address => QueuePosition) public seniorExitQueue;\\n\\n    constructor (address _dao, address _guardian) Governed(_dao, _guardian) {}\\n\\n    /// @notice Initialize the SmartAlpha system\\n    /// @dev Junior and Senior tokens must be owner by this contract or the function will revert.\\n    /// @param poolTokenAddr Address of the pool token\\n    /// @param oracleAddr Address of the price oracle for the pool token\\n    /// @param seniorRateModelAddr Address of the senior rate model (used to calculate upside exposure and downside protection rates)\\n    /// @param accountingModelAddr Address of the accounting model (used to determine the junior or senior losses for an epoch)\\n    /// @param juniorTokenAddr Address of the junior token (ERC20)\\n    /// @param seniorTokenAddr Address of the senior token (ERC20)\\n    /// @param _epoch1Start Timestamp at which the first epoch begins\\n    /// @param _epochDuration Duration of the epoch in seconds\\n    function initialize(\\n        address poolTokenAddr,\\n        address oracleAddr,\\n        address seniorRateModelAddr,\\n        address accountingModelAddr,\\n        address juniorTokenAddr,\\n        address seniorTokenAddr,\\n        uint256 _epoch1Start,\\n        uint256 _epochDuration\\n    ) public {\\n        require(!initialized, \\\"contract already initialized\\\");\\n        initialized = true;\\n\\n        enforceCallerDAO();\\n        setPriceOracle(oracleAddr);\\n        setSeniorRateModel(seniorRateModelAddr);\\n        setAccountingModel(accountingModelAddr);\\n\\n        require(poolTokenAddr != address(0), \\\"pool token can't be 0x0\\\");\\n        require(juniorTokenAddr != address(0), \\\"junior token can't be 0x0\\\");\\n        require(seniorTokenAddr != address(0), \\\"senior token can't be 0x0\\\");\\n\\n        poolToken = IERC20(poolTokenAddr);\\n\\n        juniorToken = OwnableERC20(juniorTokenAddr);\\n        require(juniorToken.owner() == address(this), \\\"junior token owner must be SA\\\");\\n\\n        seniorToken = OwnableERC20(seniorTokenAddr);\\n        require(seniorToken.owner() == address(this), \\\"senior token owner must be SA\\\");\\n\\n        epoch1Start = _epoch1Start;\\n        epochDuration = _epochDuration;\\n    }\\n\\n    /// @notice Advance/finalize an epoch\\n    /// @dev Epochs are automatically advanced/finalized if there are user interactions with the contract.\\n    /// @dev If there are no interactions for one or multiple epochs, they will be skipped and the materializing of\\n    /// @dev profits and losses will only happen as if only one epoch passed. We call this \\\"elastic epochs\\\".\\n    /// @dev This function may also be called voluntarily by any party (including bots).\\n    function advanceEpoch() public {\\n        uint256 currentEpoch = getCurrentEpoch();\\n\\n        if (epoch >= currentEpoch) {\\n            return;\\n        }\\n\\n        // finalize the current epoch and take the fee from the side that made profits this epoch\\n        uint256 seniorProfits = getCurrentSeniorProfits();\\n        uint256 juniorProfits = getCurrentJuniorProfits();\\n        if (seniorProfits > 0) {\\n            uint256 fee = seniorProfits * feesPercentage / scaleFactor;\\n            epochJuniorLiquidity = epochJuniorLiquidity - seniorProfits;\\n            epochSeniorLiquidity = epochSeniorLiquidity + (seniorProfits - fee);\\n        } else if (juniorProfits > 0) {\\n            uint256 fee = juniorProfits * feesPercentage / scaleFactor;\\n            epochSeniorLiquidity = epochSeniorLiquidity - juniorProfits;\\n            epochJuniorLiquidity = epochJuniorLiquidity + (juniorProfits - fee);\\n        }\\n\\n        emit EpochEnd(epoch, juniorProfits, seniorProfits);\\n\\n        // set the epoch entry price to the current price, effectively resetting profits and losses to 0\\n        epochEntryPrice = priceOracle.getPrice();\\n\\n        uint256 juniorUnderlyingOut = _processJuniorQueues();\\n        uint256 seniorUnderlyingOut = _processSeniorQueues();\\n\\n        // move the liquidity from the entry queue to the epoch balance & the exited liquidity from the epoch to the exit queue\\n        epochSeniorLiquidity = epochSeniorLiquidity - seniorUnderlyingOut + queuedSeniorsUnderlyingIn;\\n        queuedSeniorsUnderlyingOut += seniorUnderlyingOut;\\n        queuedSeniorsUnderlyingIn = 0;\\n\\n        epochJuniorLiquidity = epochJuniorLiquidity - juniorUnderlyingOut + queuedJuniorsUnderlyingIn;\\n        queuedJuniorsUnderlyingOut += juniorUnderlyingOut;\\n        queuedJuniorsUnderlyingIn = 0;\\n\\n        // reset the queue of tokens to burn\\n        queuedJuniorTokensBurn = 0;\\n        queuedSeniorTokensBurn = 0;\\n\\n        // update the upside exposure and downside protection rates based on the new pool composition (after processing the entry and exit queues)\\n        (epochUpsideExposureRate, epochDownsideProtectionRate) = seniorRateModel.getRates(epochJuniorLiquidity, epochSeniorLiquidity);\\n\\n        // set the stored epoch to the current epoch\\n        epoch = currentEpoch;\\n    }\\n\\n    /// @notice Signal the entry into the pool as a junior\\n    /// @dev If the user already has a position in the queue, they can increase the amount by calling this function again\\n    /// @dev If a user is in the queue, they cannot exit it\\n    /// @param amount The amount of underlying the user wants to increase his queue position with\\n    function depositJunior(uint256 amount) public {\\n        enforceSystemNotPaused();\\n        advanceEpoch();\\n\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n        require(poolToken.allowance(msg.sender, address(this)) >= amount, \\\"not enough allowance\\\");\\n\\n        QueuePosition storage pos = juniorEntryQueue[msg.sender];\\n\\n        // if the user already has a position for an older epoch that was not redeemed, do it automatically\\n        // after this operation, pos.amount would be set to 0\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemJuniorTokens();\\n        }\\n\\n        // update the stored position's epoch to the current one\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        // add the amount to the queue to be converted into junior tokens when the epoch ends\\n        queuedJuniorsUnderlyingIn += amount;\\n\\n        uint256 newBalance = pos.amount + amount;\\n        pos.amount = newBalance;\\n\\n        poolToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit JuniorJoinEntryQueue(msg.sender, epoch, amount, newBalance);\\n    }\\n\\n    /// @notice Redeem the junior tokens generated for a user that participated in the queue at a specific epoch\\n    /// @dev User will receive an amount of junior tokens corresponding to his underlying balance converted at the price the epoch was finalized\\n    /// @dev This only works for past epochs and will revert if called for current or future epochs.\\n    function redeemJuniorTokens() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = juniorEntryQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 underlyingAmount = pos.amount;\\n        require(underlyingAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochJuniorTokenPrice[pos.epoch];\\n        uint256 amountJuniorTokensDue = underlyingAmount * scaleFactor / price;\\n\\n        juniorToken.transfer(msg.sender, amountJuniorTokensDue);\\n\\n        emit JuniorRedeemTokens(msg.sender, pos.epoch, amountJuniorTokensDue);\\n    }\\n\\n    /// @notice Signal the entry into the pool as a senior\\n    /// @dev If the user already has a position in the queue, they can increase the amount by calling this function again\\n    /// @dev If a user is in the queue, they cannot exit it\\n    /// @param amount The amount of underlying the user wants to increase his queue position with\\n    function depositSenior(uint256 amount) public {\\n        enforceSystemNotPaused();\\n        advanceEpoch();\\n\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\n        require(poolToken.allowance(msg.sender, address(this)) >= amount, \\\"not enough allowance\\\");\\n\\n        QueuePosition storage pos = seniorEntryQueue[msg.sender];\\n\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemSeniorTokens();\\n        }\\n\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        queuedSeniorsUnderlyingIn += amount;\\n\\n        uint256 newBalance = pos.amount + amount;\\n        pos.amount = newBalance;\\n\\n        poolToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit SeniorJoinEntryQueue(msg.sender, epoch, amount, newBalance);\\n    }\\n\\n    /// @notice Redeem the senior tokens generated for a user that participated in the queue at a specific epoch\\n    /// @dev User will receive an amount of senior tokens corresponding to his underlying balance converted at the price the epoch was finalized\\n    /// @dev This only works for past epochs and will revert if called for current or future epochs.\\n    function redeemSeniorTokens() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = seniorEntryQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 underlyingAmount = pos.amount;\\n        require(underlyingAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochSeniorTokenPrice[pos.epoch];\\n        uint256 amountSeniorTokensDue = underlyingAmount * scaleFactor / price;\\n\\n        seniorToken.transfer(msg.sender, amountSeniorTokensDue);\\n\\n        emit SeniorRedeemTokens(msg.sender, pos.epoch, amountSeniorTokensDue);\\n    }\\n\\n    /// @notice Signal the intention to leave the pool as a junior\\n    /// @dev User will join the exit queue and his junior tokens will be transferred back to the pool.\\n    /// @dev Their tokens will be burned when the epoch is finalized and the underlying due will be set aside.\\n    /// @dev Users can increase their queue amount but can't exit the queue\\n    /// @param amountJuniorTokens The amount of tokens the user wants to exit with\\n    function exitJunior(uint256 amountJuniorTokens) public {\\n        advanceEpoch();\\n\\n        uint256 balance = juniorToken.balanceOf(msg.sender);\\n        require(balance >= amountJuniorTokens, \\\"not enough balance\\\");\\n\\n        queuedJuniorTokensBurn += amountJuniorTokens;\\n\\n        QueuePosition storage pos = juniorExitQueue[msg.sender];\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemJuniorUnderlying();\\n        }\\n\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        uint256 newBalance = pos.amount + amountJuniorTokens;\\n        pos.amount = newBalance;\\n\\n        juniorToken.transferAsOwner(msg.sender, address(this), amountJuniorTokens);\\n\\n        emit JuniorJoinExitQueue(msg.sender, epoch, amountJuniorTokens, newBalance);\\n    }\\n\\n    /// @notice Redeem the underlying for an exited epoch\\n    /// @dev Only works if the user signaled the intention to exit the pool by entering the queue for that epoch.\\n    /// @dev Can only be called for a previous epoch and will revert for current and future epochs.\\n    /// @dev At this point, the junior tokens were burned by the contract and the underlying was set aside.\\n    function redeemJuniorUnderlying() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = juniorExitQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 juniorTokenAmount = pos.amount;\\n        require(juniorTokenAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochJuniorTokenPrice[pos.epoch];\\n        uint256 underlyingDue = juniorTokenAmount * price / scaleFactor;\\n\\n        queuedJuniorsUnderlyingOut -= underlyingDue;\\n\\n        poolToken.safeTransfer(msg.sender, underlyingDue);\\n\\n        emit JuniorRedeemUnderlying(msg.sender, pos.epoch, underlyingDue);\\n    }\\n\\n    /// @notice Signal the intention to leave the pool as a senior\\n    /// @dev User will join the exit queue and his senior tokens will be transferred back to the pool.\\n    /// @dev Their tokens will be burned when the epoch is finalized and the underlying due will be set aside.\\n    /// @dev Users can increase their queue amount but can't exit the queue\\n    /// @param amountSeniorTokens The amount of tokens the user wants to exit with\\n    function exitSenior(uint256 amountSeniorTokens) public {\\n        advanceEpoch();\\n\\n        uint256 balance = seniorToken.balanceOf(msg.sender);\\n        require(balance >= amountSeniorTokens, \\\"not enough balance\\\");\\n\\n        queuedSeniorTokensBurn += amountSeniorTokens;\\n\\n        QueuePosition storage pos = seniorExitQueue[msg.sender];\\n        if (pos.amount > 0 && pos.epoch < epoch) {\\n            redeemSeniorUnderlying();\\n        }\\n\\n        if (pos.epoch < epoch) {\\n            pos.epoch = epoch;\\n        }\\n\\n        uint256 newBalance = pos.amount + amountSeniorTokens;\\n        pos.amount = newBalance;\\n\\n        seniorToken.transferAsOwner(msg.sender, address(this), amountSeniorTokens);\\n\\n        emit SeniorJoinExitQueue(msg.sender, epoch, amountSeniorTokens, newBalance);\\n    }\\n\\n    /// @notice Redeem the underlying for an exited epoch\\n    /// @dev Only works if the user signaled the intention to exit the pool by entering the queue for that epoch.\\n    /// @dev Can only be called for a previous epoch and will revert for current and future epochs.\\n    /// @dev At this point, the senior tokens were burned by the contract and the underlying was set aside.\\n    function redeemSeniorUnderlying() public {\\n        advanceEpoch();\\n\\n        QueuePosition storage pos = seniorExitQueue[msg.sender];\\n        require(pos.epoch < epoch, \\\"not redeemable yet\\\");\\n\\n        uint256 seniorTokenAmount = pos.amount;\\n        require(seniorTokenAmount > 0, \\\"nothing to redeem\\\");\\n\\n        pos.amount = 0;\\n\\n        uint256 price = history_epochSeniorTokenPrice[pos.epoch];\\n        uint256 underlyingDue = seniorTokenAmount * price / scaleFactor;\\n\\n        queuedSeniorsUnderlyingOut -= underlyingDue;\\n\\n        poolToken.safeTransfer(msg.sender, underlyingDue);\\n\\n        emit SeniorRedeemUnderlying(msg.sender, pos.epoch, underlyingDue);\\n    }\\n\\n    /// @notice Transfer the accrued fees to the fees owner\\n    /// @dev Anyone can call but fees are transferred to fees owner. Reverts if no fees accrued.\\n    function transferFees() public {\\n        uint256 amount = feesAccrued();\\n        require(amount > 0, \\\"no fees\\\");\\n        require(feesOwner != address(0), \\\"no fees owner\\\");\\n\\n        // assumption: if there are fees accrued, it means there was an owner at some point\\n        // since the percentage cannot be set without an owner and the owner can't be set to address(0) later\\n        poolToken.safeTransfer(feesOwner, amount);\\n\\n        emit FeesTransfer(msg.sender, feesOwner, amount);\\n    }\\n\\n    /// @notice Calculates the current epoch based on the start of the first epoch and the epoch duration\\n    /// @return The id of the current epoch\\n    function getCurrentEpoch() public view returns (uint256) {\\n        if (block.timestamp < epoch1Start) {\\n            return 0;\\n        }\\n\\n        return (block.timestamp - epoch1Start) / epochDuration + 1;\\n    }\\n\\n    /// @notice Calculates the junior profits based on current pool conditions\\n    /// @dev It always returns 0 if the price went down.\\n    /// @return The amount, in pool tokens, that is considered profit for the juniors\\n    function getCurrentJuniorProfits() public view returns (uint256) {\\n        uint256 currentPrice = priceOracle.getPrice();\\n\\n        return accountingModel.calcJuniorProfits(\\n            epochEntryPrice,\\n            currentPrice,\\n            epochUpsideExposureRate,\\n            epochSeniorLiquidity,\\n            epochBalance()\\n        );\\n    }\\n\\n    /// @notice Calculates the junior losses (in other words, senior profits) based on the current pool conditions\\n    /// @dev It always returns 0 if the price went up.\\n    /// @return The amount, in pool tokens, that is considered loss for the juniors\\n    function getCurrentSeniorProfits() public view returns (uint256) {\\n        uint256 currentPrice = priceOracle.getPrice();\\n\\n        return accountingModel.calcSeniorProfits(\\n            epochEntryPrice,\\n            currentPrice,\\n            epochDownsideProtectionRate,\\n            epochSeniorLiquidity,\\n            epochBalance()\\n        );\\n    }\\n\\n    /// @notice Calculate the epoch balance\\n    /// @return epoch balance\\n    function epochBalance() public view returns (uint256) {\\n        return epochJuniorLiquidity + epochSeniorLiquidity;\\n    }\\n\\n    /// @notice Return the total amount of underlying in the queues\\n    /// @return amount of underlying in the queues\\n    function underlyingInQueues() public view returns (uint256) {\\n        return queuedJuniorsUnderlyingIn + queuedSeniorsUnderlyingIn + queuedJuniorsUnderlyingOut + queuedSeniorsUnderlyingOut;\\n    }\\n\\n    /// @notice Calculate the total fees accrued\\n    /// @dev We consider fees any amount of underlying that is not accounted for in the epoch balance & queues\\n    function feesAccrued() public view returns (uint256) {\\n        return poolToken.balanceOf(address(this)) - epochBalance() - underlyingInQueues();\\n    }\\n\\n    /// @notice Return the price of the junior token for the current epoch\\n    /// @dev If there's no supply, it returns 1 (scaled by scaleFactor).\\n    /// @dev It does not take into account the current profits and losses.\\n    /// @return The price of a junior token in pool tokens\\n    function getEpochJuniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = juniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return epochJuniorLiquidity * scaleFactor / supply;\\n    }\\n\\n    /// @notice Return the price of the senior token for the current epoch\\n    /// @dev If there's no supply, it returns 1 (scaled by scaleFactor).\\n    /// @dev It does not take into account the current profits and losses.\\n    /// @return The price of a senior token in pool tokens\\n    function getEpochSeniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = seniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return epochSeniorLiquidity * scaleFactor / supply;\\n    }\\n\\n    /// @notice Return the senior liquidity taking into account the current, unrealized, profits and losses\\n    /// @return The estimated senior liquidity\\n    function estimateCurrentSeniorLiquidity() public view returns (uint256) {\\n        uint256 seniorProfits = getCurrentSeniorProfits();\\n        if (seniorProfits > 0) {\\n            uint256 fee = seniorProfits * feesPercentage / scaleFactor;\\n            seniorProfits -= fee;\\n        }\\n\\n        uint256 juniorProfits = getCurrentJuniorProfits();\\n\\n        return epochSeniorLiquidity + seniorProfits - juniorProfits;\\n    }\\n\\n    /// @notice Return the junior liquidity taking into account the current, unrealized, profits and losses\\n    /// @return The estimated junior liquidity\\n    function estimateCurrentJuniorLiquidity() public view returns (uint256) {\\n        uint256 seniorProfits = getCurrentSeniorProfits();\\n\\n        uint256 juniorProfits = getCurrentJuniorProfits();\\n        if (juniorProfits > 0) {\\n            uint256 fee = juniorProfits * feesPercentage / scaleFactor;\\n            juniorProfits -= fee;\\n        }\\n\\n        return epochJuniorLiquidity - seniorProfits + juniorProfits;\\n    }\\n\\n    /// @notice Return the current senior token price taking into account the current, unrealized, profits and losses\\n    /// @return The estimated senior token price\\n    function estimateCurrentSeniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = seniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return estimateCurrentSeniorLiquidity() * scaleFactor / supply;\\n    }\\n\\n    /// @notice Return the current junior token price taking into account the current, unrealized, profits and losses\\n    /// @return The estimated junior token price\\n    function estimateCurrentJuniorTokenPrice() public view returns (uint256) {\\n        uint256 supply = juniorToken.totalSupply();\\n\\n        if (supply == 0) {\\n            return scaleFactor;\\n        }\\n\\n        return estimateCurrentJuniorLiquidity() * scaleFactor / supply;\\n    }\\n\\n    /// @notice Process the junior entry and exit queues\\n    /// @dev It saves the junior token price valid for the stored epoch to storage for further reference.\\n    /// @dev It optimizes gas usage by re-using some of the tokens it already has minted which leads to only one of the {mint, burn} actions to be executed.\\n    /// @dev All queued positions will be converted into junior tokens or underlying at the same price.\\n    /// @return The amount of underlying (pool tokens) that should be set aside\\n    function _processJuniorQueues() internal returns (uint256){\\n        uint256 juniorTokenPrice = getEpochJuniorTokenPrice();\\n        history_epochJuniorTokenPrice[epoch] = juniorTokenPrice;\\n\\n        uint256 juniorTokensToMint = queuedJuniorsUnderlyingIn * scaleFactor / juniorTokenPrice;\\n        uint256 juniorTokensToBurn = queuedJuniorTokensBurn;\\n\\n        uint256 juniorUnderlyingOut = juniorTokensToBurn * juniorTokenPrice / scaleFactor;\\n\\n        if (juniorTokensToMint > juniorTokensToBurn) {\\n            uint256 diff = juniorTokensToMint - juniorTokensToBurn;\\n            juniorToken.mint(address(this), diff);\\n        } else if (juniorTokensToBurn > juniorTokensToMint) {\\n            uint256 diff = juniorTokensToBurn - juniorTokensToMint;\\n            juniorToken.burn(address(this), diff);\\n        } else {\\n            // nothing to mint or burn\\n        }\\n\\n        return juniorUnderlyingOut;\\n    }\\n\\n    /// @notice Process the senior entry and exit queues\\n    /// @dev It saves the senior token price valid for the stored epoch to storage for further reference.\\n    /// @dev It optimizes gas usage by re-using some of the tokens it already has minted which leads to only one of the {mint, burn} actions to be executed.\\n    /// @dev All queued positions will be converted into senior tokens or underlying at the same price.\\n    /// @return The amount of underlying (pool tokens) that should be set aside\\n    function _processSeniorQueues() internal returns (uint256) {\\n        uint256 seniorTokenPrice = getEpochSeniorTokenPrice();\\n        history_epochSeniorTokenPrice[epoch] = seniorTokenPrice;\\n\\n        uint256 seniorTokensToMint = queuedSeniorsUnderlyingIn * scaleFactor / seniorTokenPrice;\\n        uint256 seniorTokensToBurn = queuedSeniorTokensBurn;\\n\\n        uint256 seniorUnderlyingOut = seniorTokensToBurn * seniorTokenPrice / scaleFactor;\\n\\n        if (seniorTokensToMint > seniorTokensToBurn) {\\n            uint256 diff = seniorTokensToMint - seniorTokensToBurn;\\n            seniorToken.mint(address(this), diff);\\n        } else if (seniorTokensToBurn > seniorTokensToMint) {\\n            uint256 diff = seniorTokensToBurn - seniorTokensToMint;\\n            seniorToken.burn(address(this), diff);\\n        } else {\\n            // nothing to mint or burn\\n        }\\n\\n        return seniorUnderlyingOut;\\n    }\\n}\\n\",\"keccak256\":\"0x827690cdadd9727fad027a33bdf41dc91b8f77f386abfc9588d7231554e7ffd7\",\"license\":\"Apache-2.0\"},\"contracts/SmartAlphaEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nabstract contract SmartAlphaEvents {\\n    /// @notice Logs a deposit of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param underlyingIn The amount of underlying deposited\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event JuniorJoinEntryQueue(address indexed user, uint256 epochId, uint256 underlyingIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs a redeem (2nd step of deposit) of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param tokensOut The amount of junior tokens redeemed\\n    event JuniorRedeemTokens(address indexed user, uint256 epochId, uint256 tokensOut);\\n\\n    /// @notice Logs an exit (1st step) of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param tokensIn The amount of junior tokens deposited into the queue\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event JuniorJoinExitQueue(address indexed user, uint256 epochId, uint256 tokensIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs an exit (2nd step) of a junior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param underlyingOut The amount of underlying transferred to the user\\n    event JuniorRedeemUnderlying(address indexed user, uint256 epochId, uint256 underlyingOut);\\n\\n    /// @notice Logs a deposit of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param underlyingIn The amount of underlying deposited\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event SeniorJoinEntryQueue(address indexed user, uint256 epochId, uint256 underlyingIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs a redeem (2nd step of deposit) of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param tokensOut The amount of senior tokens redeemed\\n    event SeniorRedeemTokens(address indexed user, uint256 epochId, uint256 tokensOut);\\n\\n    /// @notice Logs an exit (1st step) of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch in which they entered the queue\\n    /// @param tokensIn The amount of senior tokens deposited into the queue\\n    /// @param currentQueueBalance The total balance of the user in the queue for the current epoch\\n    event SeniorJoinExitQueue(address indexed user, uint256 epochId, uint256 tokensIn, uint256 currentQueueBalance);\\n\\n    /// @notice Logs an exit (2nd step) of a senior\\n    /// @param user Address of the caller\\n    /// @param epochId The epoch for which the redeem was executed\\n    /// @param underlyingOut The amount of underlying transferred to the user\\n    event SeniorRedeemUnderlying(address indexed user, uint256 epochId, uint256 underlyingOut);\\n\\n    /// @notice Logs an epoch end\\n    /// @param epochId The id of the epoch that just ended\\n    /// @param juniorProfits The amount of junior profits for the epoch that ended in underlying tokens\\n    /// @param seniorProfits The amount of senior profits for the epoch that ended in underlying tokens\\n    event EpochEnd(uint256 epochId, uint256 juniorProfits, uint256 seniorProfits);\\n\\n    /// @notice Logs a transfer of fees\\n    /// @param caller The caller of the function\\n    /// @param destination The destination address of the funds\\n    /// @param amount The amount of tokens that were transferred\\n    event FeesTransfer(address caller, address destination, uint256 amount);\\n\\n    /// @notice Logs a transfer of dao power to a new address\\n    /// @param oldDAO The address of the old DAO\\n    /// @param newDAO The address of the new DAO\\n    event TransferDAO(address oldDAO, address newDAO);\\n\\n    /// @notice Logs a transfer of Guardian power to a new address\\n    /// @param oldGuardian The address of the old guardian\\n    /// @param newGuardian The address of the new guardian\\n    event TransferGuardian(address oldGuardian, address newGuardian);\\n\\n    /// @notice Logs a system pause\\n    event PauseSystem();\\n\\n    /// @notice logs a system resume\\n    event ResumeSystem();\\n\\n    /// @notice logs a change of price oracle\\n    /// @param oldOracle Address of the old oracle\\n    /// @param newOracle Address of the new oracle\\n    event SetPriceOracle(address oldOracle, address newOracle);\\n\\n    /// @notice Logs a change of senior rate model contract\\n    /// @param oldModel Address of the old model\\n    /// @param newModel Address of the new model\\n    event SetSeniorRateModel(address oldModel, address newModel);\\n\\n    /// @notice Logs a change of accounting model contract\\n    /// @param oldModel Address of the old model\\n    /// @param newModel Address of the new model\\n    event SetAccountingModel(address oldModel, address newModel);\\n\\n    /// @notice Logs a change of fees owner\\n    /// @param oldOwner Address of the old owner of fees\\n    /// @param newOwner Address of the new owner of fees\\n    event SetFeesOwner(address oldOwner, address newOwner);\\n\\n    /// @notice Logs a change of fees percentage\\n    /// @param oldPercentage The old percentage of fees\\n    /// @param newPercentage The new percentage of fees\\n    event SetFeesPercentage(uint256 oldPercentage, uint256 newPercentage);\\n}\\n\",\"keccak256\":\"0xf221f5125de022d6e042f31a3cb5cfc61f221b2c96abbbfbef51f39c48f46a6e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n    function decimals() external view returns (uint8);\\n    function description() external view returns (string memory);\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe25a6ac205964cbc6ba35a8b37c6b104cb698119b58f9dbaf79cc9125bb612c2\",\"license\":\"MIT\"},\"contracts/interfaces/IAccountingModel.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface IAccountingModel {\\n    function calcJuniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 upsideExposureRate,\\n        uint256 totalSeniors,\\n        uint256 totalBalance\\n    ) external pure returns (uint256);\\n\\n    function calcSeniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 downsideProtectionRate,\\n        uint256 totalSeniors,\\n        uint256 totalBalance\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x464f2c1f6a2f60a144cbd6da1d15859794c972897f7b3b1d9da856fd0ab27358\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface IPriceOracle {\\n    function getPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3851c607e3979781522c3879056027850e63b319f5e5dd862cb88ec0d0fdce70\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISeniorRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\ninterface ISeniorRateModel {\\n    function getRates(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256, uint256);\\n    function getUpsideExposureRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256);\\n    function getDownsideProtectionRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5de0ad8fe825db0fb964764f5095c2ff60fe29c5c8cd7c070e1326d7c05966e5\",\"license\":\"Apache-2.0\"},\"contracts/models/AccountingModel.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../interfaces/IAccountingModel.sol\\\";\\n\\ncontract AccountingModel is IAccountingModel {\\n    uint256 constant public scaleFactor = 10 ** 18;\\n\\n    function calcJuniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 upsideExposureRate,\\n        uint256 totalSeniors,\\n        uint256 //totalBalance\\n    ) public pure override returns (uint256) {\\n        // price went down => there are no profits for the juniors\\n        if (currentPrice <= entryPrice) {\\n            return 0;\\n        }\\n\\n        uint256 x = currentPrice - entryPrice;\\n        uint256 y = scaleFactor - upsideExposureRate;\\n\\n        // (current price - entry price) * (1 - upside rate) * total seniors / current price\\n        return x * y * totalSeniors / currentPrice / scaleFactor;\\n    }\\n\\n    /// @notice Calculates the junior losses (in other words, senior profits) based on the current pool conditions\\n    /// @dev It always returns 0 if the price went up.\\n    /// @return The amount, in pool tokens, that is considered loss for the juniors\\n    function calcSeniorProfits(\\n        uint256 entryPrice,\\n        uint256 currentPrice,\\n        uint256 downsideProtectionRate,\\n        uint256 totalSeniors,\\n        uint256 //totalBalance\\n    ) public pure override returns (uint256) {\\n        // price went up => there are no losses for the juniors\\n        if (entryPrice <= currentPrice) {\\n            return 0;\\n        }\\n\\n        // entryPrice * (1 - downsideProtectionRate) + 1\\n        // adding +1 to avoid rounding errors that would cause it to return profits that are greater than the junior liquidity\\n        // minPrice would end up equal to 0 if the downsideProtectionRate is 100%\\n        uint256 minPrice = entryPrice * (scaleFactor - downsideProtectionRate) / scaleFactor + 1;\\n\\n        // when there are no juniors in the pool and the downside protection rate is 0,\\n        // the minPrice would be equal to `entryPrice + 1`\\n        if (entryPrice <= minPrice) {\\n            return 0;\\n        }\\n\\n        uint256 calcPrice = currentPrice;\\n        if (calcPrice < minPrice) {\\n            calcPrice = minPrice;\\n        }\\n\\n        return totalSeniors * entryPrice / calcPrice - totalSeniors;\\n    }\\n}\\n\",\"keccak256\":\"0x23326fc9d1570b6ab60da1cdf5c1dd6d7aefe1b6e50ad7906e621d70891df0a3\",\"license\":\"Apache-2.0\"},\"contracts/models/SeniorRateModelV3.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../interfaces/ISeniorRateModel.sol\\\";\\n\\ncontract SeniorRateModelV3 is ISeniorRateModel {\\n    uint256 constant public scaleFactor = 10 ** 18;\\n\\n    /// @notice m1, b1 and m2, b2 are the coefficients corresponding to the lines used to calculate the rate sum\\n    /// @dev The equation of the line is calculated using the y = mx + b formula where m is the slope of the line and b is the y-intercept\\n    // f(x) = -18*x + 1\\n    uint256 constant public m1 = 18 * scaleFactor; // -18\\n    uint256 constant public b1 = scaleFactor; // +1\\n\\n    // f(x) = (18/19)*x + 1/19\\n    uint256 constant public m2 = 18 * scaleFactor / 19; // 18/19\\n    uint256 constant public b2 = scaleFactor / 19; // 1/19\\n\\n    uint256 constant splitPoint = 5 * scaleFactor / 100;\\n\\n    uint256 constant maxProtectionPercentage = 80 * scaleFactor / 100;\\n    uint256 constant maxProtectionAbsolute = 35 * scaleFactor / 100;\\n\\n    // @notice Get the rates offered to seniors based on the current pool conditions\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return (uint256, uint256) The upside exposure rate and downside protection rate scaled by `scaleFactor`\\n    function getRates(uint256 juniorLiquidity, uint256 seniorLiquidity) external pure override returns (uint256, uint256) {\\n        uint256 sum = calcRateSum(juniorLiquidity, seniorLiquidity);\\n        uint256 protection = getDownsideProtectionRate(juniorLiquidity, seniorLiquidity);\\n\\n        return (sum - protection, protection);\\n    }\\n\\n    /// @notice Get the upside exposure rate based on the current pool conditions\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return uint256 The upside exposure rate, scaled by `scaleFactor`\\n    function getUpsideExposureRate(uint256 juniorLiquidity, uint256 seniorLiquidity) external pure override returns (uint256) {\\n        uint256 sum = calcRateSum(juniorLiquidity, seniorLiquidity);\\n        uint256 protection = getDownsideProtectionRate(juniorLiquidity, seniorLiquidity);\\n\\n        return sum - protection;\\n    }\\n\\n    /// @notice Get the downside protection rate based on the current pool conditions\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return uint256 The downside protection rate, scaled by `scaleFactor`\\n    function getDownsideProtectionRate(uint256 juniorLiquidity, uint256 seniorLiquidity) public pure override returns (uint256) {\\n        uint256 total = juniorLiquidity + seniorLiquidity;\\n        if (total == 0) {\\n            return 0;\\n        }\\n\\n        uint256 protection = maxProtectionPercentage * juniorLiquidity / total;\\n\\n        if (protection <= maxProtectionAbsolute) {\\n            return protection;\\n        }\\n\\n        return maxProtectionAbsolute;\\n    }\\n\\n    /// @notice Calculate the sum of upside exposure rate and downside protection rate\\n    /// @param juniorLiquidity The total amount of junior liquidity in the pool\\n    /// @param seniorLiquidity The total amount of senior liquidity in the pool\\n    /// @return uint256 The sum available to split between protection and exposure, scaled by scaleFactor\\n    /// @dev Leave this function last in the contract to circumvent a bug in the docgen procedure\\n    function calcRateSum(uint256 juniorLiquidity, uint256 seniorLiquidity) public pure returns (uint256) {\\n        uint256 total = juniorLiquidity + seniorLiquidity;\\n        if (total == 0) {\\n            return scaleFactor;\\n        }\\n\\n        uint256 juniorDominance = juniorLiquidity * scaleFactor / total;\\n\\n        if (juniorDominance < splitPoint) {\\n            return b1 - m1 * juniorLiquidity / total;\\n        }\\n\\n        return m2 * juniorLiquidity / total + b2;\\n    }\\n}\\n\",\"keccak256\":\"0x551faf1db6ea8e2f5f6a02a250b19d2b97d1cec8001e05e2d61e4966c24fa294\",\"license\":\"Apache-2.0\"},\"contracts/oracles/ChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\nimport \\\"../interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @title Implementation of an Oracle using ChainLink aggregators as a data source\\ncontract ChainlinkOracle is IPriceOracle {\\n    AggregatorV3Interface public oracle;\\n\\n    constructor (address oracleAddr) {\\n        require(oracleAddr != address(0), \\\"oracle cannot be 0x0\\\");\\n        oracle = AggregatorV3Interface(oracleAddr);\\n    }\\n\\n    function getPrice() public view override returns (uint256) {\\n        (, int price, , ,) = oracle.latestRoundData();\\n\\n        return uint256(price);\\n    }\\n}\\n\",\"keccak256\":\"0x7422aa5764392bda8f757cb040f8b8abc594fee1644a850335883c05eb3fb25b\",\"license\":\"Apache-2.0\"},\"contracts/oracles/ChainlinkOracleReverse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.6;\\n\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\nimport \\\"../interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @title Implementation of an Oracle using ChainLink aggregators as a data source\\ncontract ChainlinkOracleReverse is IPriceOracle {\\n    AggregatorV3Interface public oracle;\\n\\n    constructor (address oracleAddr) {\\n        require(oracleAddr != address(0), \\\"oracle cannot be 0x0\\\");\\n        oracle = AggregatorV3Interface(oracleAddr);\\n    }\\n\\n    function getPrice() public view override returns (uint256) {\\n        (, int256 price, , ,) = oracle.latestRoundData();\\n\\n        uint8 decimals = oracle.decimals();\\n\\n        return 10 ** (decimals + 8) / uint256(price);\\n    }\\n}\\n\",\"keccak256\":\"0xe5e101d5af880f5a57ee14631a4c32584cf8e5221f9c6c2188feb52f7dd0ec11\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806341c8d3a7146200006f5780636f682a531462000088578063715018a614620000a55780638da5cb5b14620000af578063ac4afa3814620000c8578063f2fde38b1462000122575b600080fd5b620000866200008036600462000a64565b62000139565b005b6200009260025481565b6040519081526020015b60405180910390f35b6200008662000781565b620000b9620007c3565b6040516200009c919062000c25565b620000df620000d936600462000b96565b620007d2565b604080516001600160a01b03978816815295871660208701529386169385019390935290841660608401528316608083015290911660a082015260c0016200009c565b620000866200013336600462000a3f565b62000830565b3362000144620007c3565b6001600160a01b031614620001765760405162461bcd60e51b81526004016200016d9062000c76565b60405180910390fd5b6040805160c081018252600080825260208201819052818301819052606082018190526080820181905260a0820152905130908c90620001b69062000929565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015620001ea573d6000803e3d6000fd5b506001600160a01b03168152604051620002049062000937565b604051809103906000f08015801562000221573d6000803e3d6000fd5b506001600160a01b031660208201526040516200023e9062000945565b604051809103906000f0801580156200025b573d6000803e3d6000fd5b506001600160a01b031660408201528115620002be5788604051620002809062000953565b6200028c919062000c25565b604051809103906000f080158015620002a9573d6000803e3d6000fd5b506001600160a01b031660a082015262000306565b88604051620002cd9062000961565b620002d9919062000c25565b604051809103906000f080158015620002f6573d6000803e3d6000fd5b506001600160a01b031660a08201525b60008a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200034257600080fd5b505afa15801562000357573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200037d919062000bb0565b905088888260405162000390906200096f565b6200039e9392919062000c39565b604051809103906000f080158015620003bb573d6000803e3d6000fd5b506001600160a01b031660608301819052825160405163f2fde38b60e01b815263f2fde38b91620003ef9160040162000c25565b600060405180830381600087803b1580156200040a57600080fd5b505af11580156200041f573d6000803e3d6000fd5b5050505086868260405162000434906200096f565b620004429392919062000c39565b604051809103906000f0801580156200045f573d6000803e3d6000fd5b506001600160a01b031660808301819052825160405163f2fde38b60e01b815263f2fde38b91620004939160040162000c25565b600060405180830381600087803b158015620004ae57600080fd5b505af1158015620004c3573d6000803e3d6000fd5b5050505081600001516001600160a01b031663c740671f8c8460a0015185602001518660400151876060015188608001518c8c6040518963ffffffff1660e01b8152600401620005619897969594939291906001600160a01b039889168152968816602088015294871660408701529286166060860152908516608085015290931660a083015260c082019290925260e08101919091526101000190565b600060405180830381600087803b1580156200057c57600080fd5b505af115801562000591573d6000803e3d6000fd5b5050505081600001516001600160a01b0316637a3188668e6040518263ffffffff1660e01b8152600401620005c7919062000c25565b600060405180830381600087803b158015620005e257600080fd5b505af1158015620005f7573d6000803e3d6000fd5b50506001805480820182556000918252855160069091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180546001600160a01b039384166001600160a01b03199182161790915560208801517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf78301805491851691831691909117905560408801517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf88301805491851691831691909117905560608801517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf98301805491851691831691909117905560808801517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfa8301805491851691831691909117905560a08801517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cfb909201805492909316911617905560028054935091506200076d8362000cab565b919050555050505050505050505050505050565b336200078c620007c3565b6001600160a01b031614620007b55760405162461bcd60e51b81526004016200016d9062000c76565b620007c16000620008d9565b565b6000546001600160a01b031690565b60018181548110620007e357600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b039485169650928416949184169390811692918116911686565b336200083b620007c3565b6001600160a01b031614620008645760405162461bcd60e51b81526004016200016d9062000c76565b6001600160a01b038116620008cb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200016d565b620008d681620008d9565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6132708062000cec83390190565b6104758062003f5c83390190565b61029e80620043d183390190565b6104bb806200466f83390190565b6102988062004b2a83390190565b6111108062004dc283390190565b80356001600160a01b03811681146200099557600080fd5b919050565b803580151581146200099557600080fd5b600082601f830112620009bd57600080fd5b81356001600160401b0380821115620009da57620009da62000cd5565b604051601f8301601f19908116603f0116810190828211818310171562000a055762000a0562000cd5565b8160405283815286602085880101111562000a1f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121562000a5257600080fd5b62000a5d826200097d565b9392505050565b60008060008060008060008060008060006101608c8e03121562000a8757600080fd5b62000a928c6200097d565b9a5062000aa260208d016200097d565b995062000ab260408d016200097d565b985062000ac260608d016200097d565b97506001600160401b0360808d013581101562000ade57600080fd5b62000af08e60808f01358f01620009ab565b97508060a08e0135111562000b0457600080fd5b62000b168e60a08f01358f01620009ab565b96508060c08e0135111562000b2a57600080fd5b62000b3c8e60c08f01358f01620009ab565b95508060e08e0135111562000b5057600080fd5b5062000b638d60e08e01358e01620009ab565b93506101008c013592506101208c0135915062000b846101408d016200099a565b90509295989b509295989b9093969950565b60006020828403121562000ba957600080fd5b5035919050565b60006020828403121562000bc357600080fd5b815160ff8116811462000a5d57600080fd5b6000815180845260005b8181101562000bfd5760208185018101518683018201520162000bdf565b8181111562000c10576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60608152600062000c4e606083018662000bd5565b828103602084015262000c62818662000bd5565b91505060ff83166040830152949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060001982141562000cce57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b5060405162003270380380620032708339810160408190526200003491620000e3565b81816001600160a01b038216620000685760405162461bcd60e51b81526004016200005f906200011b565b60405180910390fd5b6001600160a01b038116620000915760405162461bcd60e51b81526004016200005f906200011b565b600080546001600160a01b039384166001600160a01b0319918216179091556001805492909316911617905550620001449050565b80516001600160a01b0381168114620000de57600080fd5b919050565b60008060408385031215620000f757600080fd5b6200010283620000c6565b91506200011260208401620000c6565b90509250929050565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b61311c80620001546000396000f3fe608060405234801561001057600080fd5b50600436106102f65760003560e01c806301655bb2146102fb578063055ff2721461032e578063077e620b1461033757806307886ac614610341578063091954cd1461034a5780630aeb0d451461035d578063157c51d314610365578063158ef93e1461036d578063194f92611461038a5780631a48c5d2146103925780631ff05aa21461039a578063213ecbba146103ba5780632229f817146103c35780632630c12f146103cc5780633310ae3b146103df5780633cf80e6c146103f25780633dadcd0e146103fa5780634162169f1461040357806341a513c21461041657806343f6949e1461044b578063452a9320146104725780634e43773e146104855780634ff0876a1461049857806351992eed146104a1578063530e784f146104b4578063555f9f0c146104c757806355e1423c146104d05780635b8382f5146104d95780635c975abb146104e15780635d7f81a7146104f55780635de53e791461051c57806365b563321461052557806366eb06fa1461052d578063683dd19114610536578063759be806146105455780637a318866146105585780637ab017051461056b5780637e62fc1514610579578063812b06d014610581578063812bbab2146105a15780638d97f3cb146105a9578063900cf0cf146105bc57806390db9ab5146105c557806394db0595146105cd5780639ac3d81c146105d5578063a8f3c340146105de578063adaa8a6c146105e7578063b0e97872146105f0578063b916128714610603578063b97dd9e21461062a578063bbcf929914610632578063c2fbe7bc14610645578063c740671f1461064d578063c87f636214610660578063c9cb140514610673578063cb9d6b0d14610686578063cbdf382c1461068e578063cfca2fb4146106a6578063d6ce5458146106ae578063dc1d4fb7146106b6578063de335be4146106be578063e216ad1c146106d1578063e81619ac146106e4578063f0eff645146106ec578063f4a4341d146106ff578063fc6e9cd914610708575b600080fd5b61031b610309366004612d72565b60186020526000908152604090205481565b6040519081526020015b60405180910390f35b61031b600f5481565b61033f610710565b005b61031b60145481565b61033f610358366004612c81565b610872565b61031b610937565b61033f610a02565b60075461037a9060ff1681565b6040519015158152602001610325565b61033f610a85565b61033f610bd0565b6004546103ad906001600160a01b031681565b6040516103259190612de4565b61031b60065481565b61031b60175481565b6002546103ad906001600160a01b031681565b61033f6103ed366004612d72565b610cca565b61033f610eae565b61031b60155481565b6000546103ad906001600160a01b031681565b61043d610424366004612c81565b601a602052600090815260409020805460019091015482565b604051610325929190612ff8565b61043d610459366004612c81565b601d602052600090815260409020805460019091015482565b6001546103ad906001600160a01b031681565b61033f610493366004612d72565b61118b565b61031b600b5481565b6003546103ad906001600160a01b031681565b61033f6104c2366004612c81565b61133f565b61031b600d5481565b61031b600e5481565b61031b6113e1565b60015461037a90600160a01b900460ff1681565b61043d610503366004612c81565b601c602052600090815260409020805460019091015482565b61031b60135481565b61031b611492565b61031b60125481565b61031b670de0b6b3a764000081565b61033f610553366004612c81565b6115cf565b61033f610566366004612c81565b611666565b61031b66b1a2bc2ec5000081565b61031b61172b565b61031b61058f366004612d72565b60196020526000908152604090205481565b61033f6117e1565b61033f6105b7366004612d72565b6118db565b61031b600c5481565b61031b611a82565b61031b611af4565b61031b60105481565b61031b60115481565b61031b60165481565b6008546103ad906001600160a01b031681565b61043d610611366004612c81565b601b602052600090815260409020805460019091015482565b61031b611ba3565b61033f610640366004612c81565b611bda565b61033f611c7c565b61033f61065b366004612cbb565b611d56565b61033f61066e366004612c81565b6120c5565b61033f610681366004612d72565b612167565b61031b61222d565b6007546103ad9061010090046001600160a01b031681565b61031b612259565b61031b6122c4565b61033f6122d6565b61033f6106cc366004612d72565b612346565b6009546103ad906001600160a01b031681565b61031b61252a565b6005546103ad906001600160a01b031681565b61031b600a5481565b61031b6125de565b610718610eae565b336000908152601c60205260409020600c548154106107525760405162461bcd60e51b815260040161074990612fac565b60405180910390fd5b6001810154806107745760405162461bcd60e51b815260040161074990612e82565b6000600183018190558254815260196020526040812054908161079f670de0b6b3a764000085613056565b6107a99190613034565b60095460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906107dc9033908590600401612e36565b602060405180830381600087803b1580156107f657600080fd5b505af115801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190612d50565b50835460405133917f8b9d5ffabdef5875b86c23ad0939273948c7611ebc419a3c23c8f8532cbe20c89161086491908590612ff8565b60405180910390a250505050565b61087a612694565b6001600160a01b0381166108a05760405162461bcd60e51b815260040161074990612f55565b6001546001600160a01b03828116911614156108ce5760405162461bcd60e51b815260040161074990612ead565b6001546040517f19e3cbfd9b25c12fb88132e5887dc3a2a4f52979bd0af17f78e6fea817addf4b9161090d916001600160a01b03909116908490612df8565b60405180910390a1600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561098857600080fd5b505afa15801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c09190612d8b565b9050806109d657670de0b6b3a764000091505090565b80670de0b6b3a76400006109e8611a82565b6109f29190613056565b6109fc9190613034565b91505090565b610a0a612694565b600154600160a01b900460ff16610a4d5760405162461bcd60e51b8152602060048201526007602482015266085c185d5cd95960ca1b6044820152606401610749565b6001805460ff60a01b191690556040517f3008289779e367cc52c347e8bb0a995361494ac17d2ccb8b09a75a77f8c58b9490600090a1565b610a8d610eae565b336000908152601a60205260409020600c54815410610abe5760405162461bcd60e51b815260040161074990612fac565b600181015480610ae05760405162461bcd60e51b815260040161074990612e82565b60006001830181905582548152601860205260408120549081610b0b670de0b6b3a764000085613056565b610b159190613034565b60085460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb90610b489033908590600401612e36565b602060405180830381600087803b158015610b6257600080fd5b505af1158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a9190612d50565b50835460405133917f822bdec5f81295b087914a2de8160ebad0523c35c96ab4ab599564d86c588ced9161086491908590612ff8565b610bd8610eae565b336000908152601b60205260409020600c54815410610c095760405162461bcd60e51b815260040161074990612fac565b600181015480610c2b5760405162461bcd60e51b815260040161074990612e82565b600060018301819055825481526018602052604081205490670de0b6b3a7640000610c568385613056565b610c609190613034565b90508060136000828254610c749190613075565b9091555050600754610c959061010090046001600160a01b031633836126f1565b835460405133917fa362bf831ec0975732381d8a2218cc84161953de04be755d93f9474860f432ee9161086491908590612ff8565b610cd2610eae565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610d03903390600401612de4565b60206040518083038186803b158015610d1b57600080fd5b505afa158015610d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d539190612d8b565b905081811015610d755760405162461bcd60e51b815260040161074990612ef2565b8160146000828254610d87919061301c565b9091555050336000908152601b60205260409020600181015415801590610db05750600c548154105b15610dbd57610dbd610bd0565b600c5481541015610dce57600c5481555b6000838260010154610de0919061301c565b6001830181905560085460405163a0f0bf7f60e01b81529192506001600160a01b03169063a0f0bf7f90610e1c90339030908990600401612e12565b602060405180830381600087803b158015610e3657600080fd5b505af1158015610e4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6e9190612d50565b50336001600160a01b03167fd634a1ad9b45b7e951a1f30528c0209e937d46d164fd43268090f427349205a3600c54868460405161086493929190613006565b6000610eb8611ba3565b905080600c5410610ec65750565b6000610ed0611492565b90506000610edc61252a565b90508115610f3a576000670de0b6b3a764000060065484610efd9190613056565b610f079190613034565b905082600e54610f179190613075565b600e55610f248184613075565b600d54610f31919061301c565b600d5550610f92565b8015610f92576000670de0b6b3a764000060065483610f599190613056565b610f639190613034565b905081600d54610f739190613075565b600d55610f808183613075565b600e54610f8d919061301c565b600e55505b7faed63947ee74099c60670bac488f65fecd95864d94817d4300ee62fa63afe188600c548284604051610fc793929190613006565b60405180910390a1600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101d57600080fd5b505afa158015611031573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110559190612d8b565b601155600061106261274c565b9050600061106e612886565b905060155481600d546110819190613075565b61108b919061301c565b600d8190555080601660008282546110a3919061301c565b90915550506000601555601254600e546110be908490613075565b6110c8919061301c565b600e8190555081601360008282546110e0919061301c565b9091555050600060128190556014819055601755600354600e54600d546040516345b05a4360e01b81526001600160a01b03909316926345b05a439261112a929091600401612ff8565b604080518083038186803b15801561114157600080fd5b505afa158015611155573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111799190612da4565b601055600f55505050600c9190915550565b611193612980565b61119b610eae565b600081116111bb5760405162461bcd60e51b815260040161074990612f1e565b600754604051636eb1769f60e11b8152829161010090046001600160a01b03169063dd62ed3e906111f29033903090600401612df8565b60206040518083038186803b15801561120a57600080fd5b505afa15801561121e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112429190612d8b565b10156112605760405162461bcd60e51b815260040161074990612f7e565b336000908152601c602052604090206001810154158015906112845750600c548154105b1561129157611291610710565b600c54815410156112a257600c5481555b81601560008282546112b4919061301c565b909155505060018101546000906112cc90849061301c565b600183018190556007549091506112f39061010090046001600160a01b03163330866129aa565b336001600160a01b03167fae031a79e52a4da207e03aac3a3217f2cff9d56d24642655fbf7844a07f0f36a600c54858460405161133293929190613006565b60405180910390a2505050565b6113476129d1565b611378816040518060400160405280600f81526020016e696e76616c6964206164647265737360881b815250612a14565b6002546040517f944f260fa5475db9151efe54fc9fb6df2b40f73533d9483011e94522398cb3c1916113b7916001600160a01b03909116908490612df8565b60405180910390a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143257600080fd5b505afa158015611446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146a9190612d8b565b90508061148057670de0b6b3a764000091505090565b80670de0b6b3a76400006109e8612259565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114e357600080fd5b505afa1580156114f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151b9190612d8b565b600454601154601054600d549394506001600160a01b039092169263aeec2edd9285916115466122c4565b6040516001600160e01b031960e088901b1681526004810195909552602485019390935260448401919091526064830152608482015260a40160206040518083038186803b15801561159757600080fd5b505afa1580156115ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190612d8b565b6115d76129d1565b6001600160a01b0381166115fd5760405162461bcd60e51b815260040161074990612f55565b6005546040517f461364f084b7657c2380660ebd35dd6c4560dc78cc6e9795919e53b4e257de839161163c916001600160a01b03909116908490612df8565b60405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b61166e6129d1565b6001600160a01b0381166116945760405162461bcd60e51b815260040161074990612f55565b6000546001600160a01b03828116911614156116c25760405162461bcd60e51b815260040161074990612ead565b6000546040517fe010a6a96c097bdc495fe0aa7b1c1343e8528bd70556da39cd47b0130555c19091611701916001600160a01b03909116908490612df8565b60405180910390a1600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561177c57600080fd5b505afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190612d8b565b9050806117ca57670de0b6b3a764000091505090565b80670de0b6b3a7640000600e546109f29190613056565b6117e9610eae565b336000908152601d60205260409020600c5481541061181a5760405162461bcd60e51b815260040161074990612fac565b60018101548061183c5760405162461bcd60e51b815260040161074990612e82565b600060018301819055825481526019602052604081205490670de0b6b3a76400006118678385613056565b6118719190613034565b905080601660008282546118859190613075565b90915550506007546118a69061010090046001600160a01b031633836126f1565b835460405133917f014d40541bf53e076bad44aa8bfef33f82c777c0f04196e5582587bad9ee5b369161086491908590612ff8565b6118e3612980565b6118eb610eae565b6000811161190b5760405162461bcd60e51b815260040161074990612f1e565b600754604051636eb1769f60e11b8152829161010090046001600160a01b03169063dd62ed3e906119429033903090600401612df8565b60206040518083038186803b15801561195a57600080fd5b505afa15801561196e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119929190612d8b565b10156119b05760405162461bcd60e51b815260040161074990612f7e565b336000908152601a602052604090206001810154158015906119d45750600c548154105b156119e1576119e1610a85565b600c54815410156119f257600c5481555b8160126000828254611a04919061301c565b90915550506001810154600090611a1c90849061301c565b60018301819055600754909150611a439061010090046001600160a01b03163330866129aa565b336001600160a01b03167f81b0ac0867278845eee541a0351e48acc52b65ba1a469e840ad5a4f8a8650a2e600c54858460405161133293929190613006565b600080611a8d611492565b90508015611ac8576000670de0b6b3a764000060065483611aae9190613056565b611ab89190613034565b9050611ac48183613075565b9150505b6000611ad261252a565b90508082600d54611ae3919061301c565b611aed9190613075565b9250505090565b6000611afe61222d565b611b066122c4565b6007546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190611b3a903090600401612de4565b60206040518083038186803b158015611b5257600080fd5b505afa158015611b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8a9190612d8b565b611b949190613075565b611b9e9190613075565b905090565b6000600a54421015611bb55750600090565b600b54600a54611bc59042613075565b611bcf9190613034565b611b9e90600161301c565b611be26129d1565b611c13816040518060400160405280600f81526020016e696e76616c6964206164647265737360881b815250612a14565b6003546040517ffbbe86207337f27b9ba95decb76b63122f31b20555b8b3737055683611443aac91611c52916001600160a01b03909116908490612df8565b60405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000611c86611af4565b905060008111611cc25760405162461bcd60e51b81526020600482015260076024820152666e6f206665657360c81b6044820152606401610749565b6005546001600160a01b0316611cea5760405162461bcd60e51b815260040161074990612ecb565b600554600754611d0c916001600160a01b0361010090920482169116836126f1565b6005546040517f6d86532cebce232743f74710d18164bfb38cbebf1ca203cb83382b9cf54cd9ac91611d4b9133916001600160a01b0316908590612e12565b60405180910390a150565b60075460ff1615611da85760405162461bcd60e51b815260206004820152601c60248201527b18dbdb9d1c9858dd08185b1c9958591e481a5b9a5d1a585b1a5e995960221b6044820152606401610749565b6007805460ff19166001179055611dbd6129d1565b611dc68761133f565b611dcf86611bda565b611dd8856120c5565b6001600160a01b038816611e285760405162461bcd60e51b81526020600482015260176024820152760706f6f6c20746f6b656e2063616e27742062652030783604c1b6044820152606401610749565b6001600160a01b038416611e7a5760405162461bcd60e51b815260206004820152601960248201527806a756e696f7220746f6b656e2063616e27742062652030783603c1b6044820152606401610749565b6001600160a01b038316611ecc5760405162461bcd60e51b8152602060048201526019602482015278073656e696f7220746f6b656e2063616e27742062652030783603c1b6044820152606401610749565b600780546001600160a01b03808b1661010002610100600160a81b031990921691909117909155600880549186166001600160a01b03199092168217905560408051638da5cb5b60e01b81529051309291638da5cb5b916004808301926020929190829003018186803b158015611f4257600080fd5b505afa158015611f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7a9190612c9e565b6001600160a01b031614611fd05760405162461bcd60e51b815260206004820152601d60248201527f6a756e696f7220746f6b656e206f776e6572206d7573742062652053410000006044820152606401610749565b600980546001600160a01b0319166001600160a01b03851690811790915560408051638da5cb5b60e01b81529051309291638da5cb5b916004808301926020929190829003018186803b15801561202657600080fd5b505afa15801561203a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205e9190612c9e565b6001600160a01b0316146120b45760405162461bcd60e51b815260206004820152601d60248201527f73656e696f7220746f6b656e206f776e6572206d7573742062652053410000006044820152606401610749565b600a91909155600b55505050505050565b6120cd6129d1565b6120fe816040518060400160405280600f81526020016e696e76616c6964206164647265737360881b815250612a14565b6004546040517ffd041dbbf45fb8b18dc79ae79199a37ddc52c7559ac44fdd5fefb9aa9c2028439161213d916001600160a01b03909116908490612df8565b60405180910390a1600480546001600160a01b0319166001600160a01b0392909216919091179055565b61216f6129d1565b801561219d576005546001600160a01b031661219d5760405162461bcd60e51b815260040161074990612ecb565b66b1a2bc2ec5000081106121ed5760405162461bcd60e51b81526020600482015260176024820152761b585e081c195c98d95b9d1859d948195e18d959591959604a1b6044820152606401610749565b7fe5bd021bb3e7a336d89185c09eb4286717c23a651140650eeda4d774812cde1260065482604051612220929190612ff8565b60405180910390a1600655565b6000601654601354601554601254612245919061301c565b61224f919061301c565b611b9e919061301c565b600080612264611492565b9050600061227061252a565b905080156122ab576000670de0b6b3a7640000600654836122919190613056565b61229b9190613034565b90506122a78183613075565b9150505b8082600e546122ba9190613075565b611aed919061301c565b6000600d54600e54611b9e919061301c565b6122de612694565b600154600160a01b900460ff16156123085760405162461bcd60e51b815260040161074990612fd8565b6001805460ff60a01b1916600160a01b1790556040517fee68d332edc397b95695f3d00eb879007ec02eb6733fe32e305cc12d406d03c190600090a1565b61234e610eae565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a082319061237f903390600401612de4565b60206040518083038186803b15801561239757600080fd5b505afa1580156123ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cf9190612d8b565b9050818110156123f15760405162461bcd60e51b815260040161074990612ef2565b8160176000828254612403919061301c565b9091555050336000908152601d6020526040902060018101541580159061242c5750600c548154105b15612439576124396117e1565b600c548154101561244a57600c5481555b600083826001015461245c919061301c565b6001830181905560095460405163a0f0bf7f60e01b81529192506001600160a01b03169063a0f0bf7f9061249890339030908990600401612e12565b602060405180830381600087803b1580156124b257600080fd5b505af11580156124c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ea9190612d50565b50336001600160a01b03167f8fe0fbd18893ea6a3597f5ccec3e4494f92cc4cea7276a9a868c6a9bd1504e61600c54868460405161086493929190613006565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561257b57600080fd5b505afa15801561258f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b39190612d8b565b600454601154600f54600d549394506001600160a01b039092169263cd91b1899285916115466122c4565b600080600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561262f57600080fd5b505afa158015612643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126679190612d8b565b90508061267d57670de0b6b3a764000091505090565b80670de0b6b3a7640000600d546109f29190613056565b6001546001600160a01b03163314806126b757506000546001600160a01b031633145b6126ef5760405162461bcd60e51b815260206004820152600960248201526810b3bab0b93234b0b760b91b6044820152606401610749565b565b6127478363a9059cbb60e01b8484604051602401612710929190612e36565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612a35565b505050565b60008061275761172b565b600c54600090815260186020526040812082905560125491925090829061278790670de0b6b3a764000090613056565b6127919190613034565b6014549091506000670de0b6b3a76400006127ac8584613056565b6127b69190613034565b9050818311156128375760006127cc8385613075565b6008546040516340c10f1960e01b81529192506001600160a01b0316906340c10f19906127ff9030908590600401612e36565b600060405180830381600087803b15801561281957600080fd5b505af115801561282d573d6000803e3d6000fd5b505050505061287e565b8282111561287e57600061284b8484613075565b600854604051632770a7eb60e21b81529192506001600160a01b031690639dc29fac906127ff9030908590600401612e36565b949350505050565b6000806128916125de565b600c5460009081526019602052604081208290556015549192509082906128c190670de0b6b3a764000090613056565b6128cb9190613034565b6017549091506000670de0b6b3a76400006128e68584613056565b6128f09190613034565b9050818311156129395760006129068385613075565b6009546040516340c10f1960e01b81529192506001600160a01b0316906340c10f19906127ff9030908590600401612e36565b8282111561287e57600061294d8484613075565b600954604051632770a7eb60e21b81529192506001600160a01b031690639dc29fac906127ff9030908590600401612e36565b600154600160a01b900460ff16156126ef5760405162461bcd60e51b815260040161074990612fd8565b6129cb846323b872dd60e01b85858560405160240161271093929190612e12565b50505050565b6000546001600160a01b031633146126ef5760405162461bcd60e51b8152600401610749906020808252600490820152632164616f60e01b604082015260600190565b813b81816129cb5760405162461bcd60e51b81526004016107499190612e4f565b6000612a8a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b079092919063ffffffff16565b8051909150156127475780806020019051810190612aa89190612d50565b6127475760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610749565b6060612b168484600085612b20565b90505b9392505050565b606082471015612b815760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610749565b843b612bcf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610749565b600080866001600160a01b03168587604051612beb9190612dc8565b60006040518083038185875af1925050503d8060008114612c28576040519150601f19603f3d011682016040523d82523d6000602084013e612c2d565b606091505b5091509150612c3d828286612c48565b979650505050505050565b60608315612c57575081612b19565b825115612c675782518084602001fd5b8160405162461bcd60e51b81526004016107499190612e4f565b600060208284031215612c9357600080fd5b8135612b19816130ce565b600060208284031215612cb057600080fd5b8151612b19816130ce565b600080600080600080600080610100898b031215612cd857600080fd5b8835612ce3816130ce565b97506020890135612cf3816130ce565b96506040890135612d03816130ce565b95506060890135612d13816130ce565b94506080890135612d23816130ce565b935060a0890135612d33816130ce565b979a969950949793969295929450505060c08201359160e0013590565b600060208284031215612d6257600080fd5b81518015158114612b1957600080fd5b600060208284031215612d8457600080fd5b5035919050565b600060208284031215612d9d57600080fd5b5051919050565b60008060408385031215612db757600080fd5b505080516020909101519092909150565b60008251612dda81846020870161308c565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020815260008251806020840152612e6e81604085016020870161308c565b601f01601f19169190910160400192915050565b6020808252601190820152706e6f7468696e6720746f2072656465656d60781b604082015260600190565b602080825260049082015263216e657760e01b604082015260600190565b6020808252600d908201526c3737903332b2b99037bbb732b960991b604082015260600190565b6020808252601290820152716e6f7420656e6f7567682062616c616e636560701b604082015260600190565b6020808252601d908201527f616d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b6020808252600f908201526e696e76616c6964206164647265737360881b604082015260600190565b6020808252601490820152736e6f7420656e6f75676820616c6c6f77616e636560601b604082015260600190565b6020808252601290820152711b9bdd081c995919595b58589b19481e595d60721b604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b918252602082015260400190565b9283526020830191909152604082015260600190565b6000821982111561302f5761302f6130b8565b500190565b60008261305157634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613070576130706130b8565b500290565b600082821015613087576130876130b8565b500390565b60005b838110156130a757818101518382015260200161308f565b838111156129cb5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146130e357600080fd5b5056fea2646970667358221220682a8dbc894b1e8dec6f9c37ddd6b76a758481ec6ab6b1873bdcceb0b01a6bd364736f6c63430008060033608060405234801561001057600080fd5b50610455806100206000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c80630add6ef214610088578063428cc9b2146100a357806345b05a43146100b65780635b2842c9146100de578063683dd191146100f157806391aa69ca14610100578063a77f92ff14610108578063acb62a5a14610110578063ee495002146100f1575b600080fd5b610090610123565b6040519081526020015b60405180910390f35b6100906100b1366004610377565b610139565b6100c96100c4366004610377565b610246565b6040805192835260208301919091520161009a565b6100906100ec366004610377565b61027a565b610090670de0b6b3a764000081565b61009061031e565b61009061033d565b61009061011e366004610377565b610350565b6101366013670de0b6b3a76400006103b1565b81565b6000806101468385610399565b90508061015e57670de0b6b3a7640000915050610240565b600081610173670de0b6b3a7640000876103d3565b61017d91906103b1565b90506064610194670de0b6b3a764000060056103d3565b61019e91906103b1565b8110156101e95781856101ba670de0b6b3a764000060126103d3565b6101c491906103d3565b6101ce91906103b1565b6101e090670de0b6b3a76400006103f2565b92505050610240565b6101fc6013670de0b6b3a76400006103b1565b82866013610213670de0b6b3a764000060126103d3565b61021d91906103b1565b61022791906103d3565b61023191906103b1565b61023b9190610399565b925050505b92915050565b60008060006102558585610139565b90506000610263868661027a565b905061026f81836103f2565b969095509350505050565b6000806102878385610399565b905080610298576000915050610240565b6000818560646102b1670de0b6b3a764000060506103d3565b6102bb91906103b1565b6102c591906103d3565b6102cf91906103b1565b905060646102e6670de0b6b3a764000060236103d3565b6102f091906103b1565b81116102ff5791506102409050565b6064610314670de0b6b3a764000060236103d3565b61023b91906103b1565b6013610333670de0b6b3a764000060126103d3565b61013691906103b1565b610136670de0b6b3a764000060126103d3565b60008061035d8484610139565b9050600061036b858561027a565b905061023b81836103f2565b6000806040838503121561038a57600080fd5b50508035926020909101359150565b600082198211156103ac576103ac610409565b500190565b6000826103ce57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156103ed576103ed610409565b500290565b60008282101561040457610404610409565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205b1dd8fec899e93eadbc55495c4329e9375fa9726a92cdae0f1515575157e07964736f6c63430008060033608060405234801561001057600080fd5b5061027e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063683dd19114610046578063aeec2edd14610067578063cd91b1891461007a575b600080fd5b610055670de0b6b3a764000081565b60405190815260200160405180910390f35b610055610075366004610187565b61008d565b610055610088366004610187565b61011f565b600084861161009e57506000610116565b6000670de0b6b3a76400006100b3868261021b565b6100bd90896101fc565b6100c791906101da565b6100d29060016101c2565b90508087116100e5576000915050610116565b85818110156100f15750805b84816100fd8a836101fc565b61010791906101da565b610111919061021b565b925050505b95945050505050565b600085851161013057506000610116565b600061013c878761021b565b9050600061015286670de0b6b3a764000061021b565b9050670de0b6b3a7640000878661016984866101fc565b61017391906101fc565b61017d91906101da565b61011191906101da565b600080600080600060a0868803121561019f57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600082198211156101d5576101d5610232565b500190565b6000826101f757634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561021657610216610232565b500290565b60008282101561022d5761022d610232565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203707b7578c73335284dcb613c44e09da139107ca97495650dfee58bb6f8c422964736f6c63430008060033608060405234801561001057600080fd5b506040516104bb3803806104bb83398101604081905261002f916100ae565b6001600160a01b0381166100895760405162461bcd60e51b815260206004820152601460248201527f6f7261636c652063616e6e6f7420626520307830000000000000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790556100de565b6000602082840312156100c057600080fd5b81516001600160a01b03811681146100d757600080fd5b9392505050565b6103ce806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637dc0d1d01461003b57806398d5fdca1461006b575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610073610081565b604051908152602001610062565b6000805460408051633fabe5a360e21b8152905183926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b1580156100c657600080fd5b505afa1580156100da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fe91906101d1565b50505091505060008060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561015357600080fd5b505afa158015610167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018b9190610221565b90508161019982600861024b565b6101a490600a6102d5565b6101ae9190610270565b9250505090565b80516001600160501b03811681146101cc57600080fd5b919050565b600080600080600060a086880312156101e957600080fd5b6101f2866101b5565b9450602086015193506040860151925060608601519150610215608087016101b5565b90509295509295909350565b60006020828403121561023357600080fd5b815160ff8116811461024457600080fd5b9392505050565b600060ff821660ff84168060ff0382111561026857610268610382565b019392505050565b60008261028d57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156102cd5781600019048211156102b3576102b3610382565b808516156102c057918102915b93841c9390800290610297565b509250929050565b600061024460ff8416836000826102ee5750600161037c565b816102fb5750600061037c565b8160018114610311576002811461031b57610337565b600191505061037c565b60ff84111561032c5761032c610382565b50506001821b61037c565b5060208310610133831016604e8410600b841016171561035a575081810a61037c565b6103648383610292565b806000190482111561037857610378610382565b0290505b92915050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205adb8cd06f72e84fe2027d4c018eaf544391b996bb4e250ce2125fd84bfabf3964736f6c63430008060033608060405234801561001057600080fd5b5060405161029838038061029883398101604081905261002f916100ae565b6001600160a01b0381166100895760405162461bcd60e51b815260206004820152601460248201527f6f7261636c652063616e6e6f7420626520307830000000000000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790556100de565b6000602082840312156100c057600080fd5b81516001600160a01b03811681146100d757600080fd5b9392505050565b6101ab806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637dc0d1d01461003b57806398d5fdca1461006b575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610073610081565b604051908152602001610062565b6000805460408051633fabe5a360e21b8152905183926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b1580156100c657600080fd5b505afa1580156100da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fe9190610125565b509195945050505050565b80516001600160501b038116811461012057600080fd5b919050565b600080600080600060a0868803121561013d57600080fd5b61014686610109565b945060208601519350604086015192506060860151915061016960808701610109565b9050929550929590935056fea2646970667358221220ef2e0417707fb2fc3351e5943b5d81fa879c80d3ed8fb18f0fb980724b8cb14a64736f6c6343000806003360806040523480156200001157600080fd5b50604051620011103803806200111083398101604081905262000034916200025a565b8251839083906200004d906003906020850190620000fd565b50805162000063906004906020840190620000fd565b505050620000806200007a620000a760201b60201c565b620000ab565b6005805460ff909216600160a01b0260ff60a01b1990921691909117905550620003329050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200010b90620002df565b90600052602060002090601f0160209004810192826200012f57600085556200017a565b82601f106200014a57805160ff19168380011785556200017a565b828001600101855582156200017a579182015b828111156200017a5782518255916020019190600101906200015d565b50620001889291506200018c565b5090565b5b808211156200018857600081556001016200018d565b600082601f830112620001b557600080fd5b81516001600160401b0380821115620001d257620001d26200031c565b604051601f8301601f19908116603f01168101908282118183101715620001fd57620001fd6200031c565b816040528381526020925086838588010111156200021a57600080fd5b600091505b838210156200023e57858201830151818301840152908201906200021f565b83821115620002505760008385830101525b9695505050505050565b6000806000606084860312156200027057600080fd5b83516001600160401b03808211156200028857600080fd5b6200029687838801620001a3565b94506020860151915080821115620002ad57600080fd5b50620002bc86828701620001a3565b925050604084015160ff81168114620002d457600080fd5b809150509250925092565b600181811c90821680620002f457607f821691505b602082108114156200031657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610dce80620003426000396000f3fe608060405234801561001057600080fd5b50600436106100db5760003560e01c806306fdde03146100e0578063095ea7b3146100fe57806318160ddd1461012157806323b872dd14610133578063313ce56714610146578063395093511461016557806340c10f191461017857806370a082311461018d578063715018a6146101b65780638da5cb5b146101be57806395d89b41146101de5780639dc29fac146101e6578063a0f0bf7f146101f9578063a457c2d71461020c578063a9059cbb1461021f578063dd62ed3e14610232578063f2fde38b1461026b575b600080fd5b6100e861027e565b6040516100f59190610c6e565b60405180910390f35b61011161010c366004610c44565b610310565b60405190151581526020016100f5565b6002545b6040519081526020016100f5565b610111610141366004610c08565b610326565b600554600160a01b900460ff1660405160ff90911681526020016100f5565b610111610173366004610c44565b6103d5565b61018b610186366004610c44565b610411565b005b61012561019b366004610bb3565b6001600160a01b031660009081526020819052604090205490565b61018b61044e565b6101c6610489565b6040516001600160a01b0390911681526020016100f5565b6100e8610498565b61018b6101f4366004610c44565b6104a7565b610111610207366004610c08565b6104e0565b61011161021a366004610c44565b610526565b61011161022d366004610c44565b6105b5565b610125610240366004610bd5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61018b610279366004610bb3565b6105c2565b60606003805461028d90610d27565b80601f01602080910402602001604051908101604052809291908181526020018280546102b990610d27565b80156103065780601f106102db57610100808354040283529160200191610306565b820191906000526020600020905b8154815290600101906020018083116102e957829003601f168201915b5050505050905090565b600061031d338484610662565b50600192915050565b6000610333848484610787565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103bd5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103ca8533858403610662565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161031d91859061040c908690610cf8565b610662565b3361041a610489565b6001600160a01b0316146104405760405162461bcd60e51b81526004016103b490610cc3565b61044a8282610944565b5050565b33610457610489565b6001600160a01b03161461047d5760405162461bcd60e51b81526004016103b490610cc3565b6104876000610a11565b565b6005546001600160a01b031690565b60606004805461028d90610d27565b336104b0610489565b6001600160a01b0316146104d65760405162461bcd60e51b81526004016103b490610cc3565b61044a8282610a63565b6000336104eb610489565b6001600160a01b0316146105115760405162461bcd60e51b81526004016103b490610cc3565b61051c848484610787565b5060019392505050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105a85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103b4565b61051c3385858403610662565b600061031d338484610787565b336105cb610489565b6001600160a01b0316146105f15760405162461bcd60e51b81526004016103b490610cc3565b6001600160a01b0381166106565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b4565b61065f81610a11565b50565b6001600160a01b0383166106c45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103b4565b6001600160a01b0382166107255760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103b4565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166107eb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103b4565b6001600160a01b03821661084d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103b4565b6001600160a01b038316600090815260208190526040902054818110156108c55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103b4565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108fc908490610cf8565b92505081905550826001600160a01b0316846001600160a01b0316600080516020610d798339815191528460405161093691815260200190565b60405180910390a350505050565b6001600160a01b03821661099a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103b4565b80600260008282546109ac9190610cf8565b90915550506001600160a01b038216600090815260208190526040812080548392906109d9908490610cf8565b90915550506040518181526001600160a01b03831690600090600080516020610d798339815191529060200160405180910390a35050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610ac35760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103b4565b6001600160a01b03821660009081526020819052604090205481811015610b375760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103b4565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610b66908490610d10565b90915550506040518281526000906001600160a01b03851690600080516020610d798339815191529060200161077a565b80356001600160a01b0381168114610bae57600080fd5b919050565b600060208284031215610bc557600080fd5b610bce82610b97565b9392505050565b60008060408385031215610be857600080fd5b610bf183610b97565b9150610bff60208401610b97565b90509250929050565b600080600060608486031215610c1d57600080fd5b610c2684610b97565b9250610c3460208501610b97565b9150604084013590509250925092565b60008060408385031215610c5757600080fd5b610c6083610b97565b946020939093013593505050565b600060208083528351808285015260005b81811015610c9b57858101830151858201604001528201610c7f565b81811115610cad576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610d0b57610d0b610d62565b500190565b600082821015610d2257610d22610d62565b500390565b600181811c90821680610d3b57607f821691505b60208210811415610d5c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c082fbe4fce529b7b21416961075b58b4be9cf56f3ca66efced16d7f06c185cd64736f6c63430008060033a2646970667358221220528841e3ab49305d20336848c582af71491f84bec31d920e86daebbebcf388f764736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2029,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Pool)2025_storage)dyn_storage"
      },
      {
        "astId": 2031,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "numberOfPools",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Pool)2025_storage)dyn_storage": {
        "base": "t_struct(Pool)2025_storage",
        "encoding": "dynamic_array",
        "label": "struct PoolFactory.Pool[]",
        "numberOfBytes": "32"
      },
      "t_contract(IAccountingModel)4476": {
        "encoding": "inplace",
        "label": "contract IAccountingModel",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracle)4515": {
        "encoding": "inplace",
        "label": "contract IPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISeniorRateModel)4547": {
        "encoding": "inplace",
        "label": "contract ISeniorRateModel",
        "numberOfBytes": "20"
      },
      "t_contract(OwnableERC20)1995": {
        "encoding": "inplace",
        "label": "contract OwnableERC20",
        "numberOfBytes": "20"
      },
      "t_contract(SmartAlpha)3844": {
        "encoding": "inplace",
        "label": "contract SmartAlpha",
        "numberOfBytes": "20"
      },
      "t_struct(Pool)2025_storage": {
        "encoding": "inplace",
        "label": "struct PoolFactory.Pool",
        "members": [
          {
            "astId": 2009,
            "contract": "contracts/PoolFactory.sol:PoolFactory",
            "label": "smartAlpha",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(SmartAlpha)3844"
          },
          {
            "astId": 2012,
            "contract": "contracts/PoolFactory.sol:PoolFactory",
            "label": "seniorRateModel",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ISeniorRateModel)4547"
          },
          {
            "astId": 2015,
            "contract": "contracts/PoolFactory.sol:PoolFactory",
            "label": "accountingModel",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IAccountingModel)4476"
          },
          {
            "astId": 2018,
            "contract": "contracts/PoolFactory.sol:PoolFactory",
            "label": "juniorToken",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(OwnableERC20)1995"
          },
          {
            "astId": 2021,
            "contract": "contracts/PoolFactory.sol:PoolFactory",
            "label": "seniorToken",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(OwnableERC20)1995"
          },
          {
            "astId": 2024,
            "contract": "contracts/PoolFactory.sol:PoolFactory",
            "label": "oracle",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IPriceOracle)4515"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}